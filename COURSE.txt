
video 12

"""
c deki  gibi yorum  satırları yada  // yerinede # kullanıyoruz
/*  bunun yerinede """     """ yapıyoruz zaten yorum içinde şu an

*/ 
"""

a=3+4
a1=4-3
a2=3*4
a3=10/2
a4=2.1-3.4
a5=3.4 * 5.8
a6=54.8/0.4 # 54.8 / .4 de aynı sey54.8/ 0.4 ile
print(a6)

ebru = 15
print(ebru)
ebru = 20
print(ebru)
ebru =3.5
print(ebru)
ebru="fuck you"
print(ebru)
ebru= 2
ebru = ebru * ebru * ebru
print(ebru)
ebru= 3.4
ebru = ebru * ebru * ebru
print(ebru)

a=4
b=3
c=2
c=a+2*b
print(c)

# swap yapma yöntemi 1
print(a,b)
a,b = b,a # böyle bir swap yöntemi işte
print(a,b)

# increment felan
i=1
i=i+1 # yada i+=1  yada i+=2
b=3
b*=3
print(b) # b*=3 ,3 ile carptık yani b=9






video 14

# video 14
# arithmatic operations
"""
a=2
b=3
c=a+b
c1=c-b
c2=a*b
c3=a/b
print(c3)  # c3=0.666666
a=6
b=2
c3=a/b
print(c3)  #c3= 3.0
"""

"""  
a=345
b=36
c=a/b
print(c)  # c=9.583333333333334 bu float bölmesi yapar
c=a//b
print(c)  # c=9   bu tam sayı bölmesi yapar int gibi
"""

"""
a=13 %4
print(a)  # a=1
a=22.7 % 11.4
print(a)  # a=11.29999999
a=4 % 2
print(a)  # a=0
"""

# üst bulma olayı math deki gibi 2^3 =8 ise felan
# aynı zamanda kök felan da alırsın
"""a=3 ** 6
print(a)  # a=729
a=2 ** 3
print(a)  # a=8
"""

"""
# kök alma örnegi
a=25 in kökü  kök(25) derece 2 olsun nasıldı 25^(1/2) dir math da
a=25 ** (1/2)
print(a)  # a=5
a=27 ** (1/3)
print(a)  # a=3
"""

"""
# sayısı negatif e cevirme
a=4
a=-a
print(a)  # a=-4
a=-a
print(a)  # a= 4  olur
"""



# video 15
"""
#  stringler ve char lar char arraylari 3 farklı şekilde tanıtabilirsin
# yol 1
a='ebru naber' # ebru naber     # lakin bunda 'ebru'nunki fark' diyemezsin nunki fark i algılamaz
#  bu sebeple kaçış dizisi yapılır c and c++ daki ibi \' ile yaparsın
print(a)
a='ebru\' nunki fark  '
print(a) # ebru' nunki fark   burda fark dan sonra 2 boşluk bıraktık a da bıraktıgımız gibi

# yol 2
b="ceylan naber"
print(b)  # b=ceylan naber
b="ceyaln' nınkisi sik"
print(b)  # b=ceyaln' nınkisi sik

# yol 3

 c="""naber tatlım"""
print(c)  # naber tatlım
c="""fuck'you bitch ' ımmm"""
print(c) # fuck'you bitch ' ımmm

# yol 2 yi kullan git boş şeylerle doldurma kafayı
"""


# char arrayi gibi ayıklama durumu

"""
a="ebru fuck you chop stick"
print(a)
print( a[0] )  # e
print( a[-1]  ) # sondan dogru gelir yani k
print( a[-3]  ) # sondan dogru gelir yani i
print(a[-4])  # sondan dogru gelir yani t
 """

 # python stringlerde atlama yapabilirsin
# mesela abcdef de 1 den başlasın 2 şer olarak atlasın 4 üncü yere kadar ne varsa artık
# [ başlama indexi : bitiş indexi : atlama degeri ]

"""
a="abcdefgthymno"
b=a[2:8:2]
print(b) # bitiş  noktası dahil degildir b= ceg  ,
c=a[4:7]
print(c)  # 4 başlangıc yeri ,10 bitiş yeri ,atlama vermedik ve 1 kabul eder c=efg
d=a[:10]
print(d)  # sadece bitiş yerini verdin atlama ve başlama yi 1 olarak kabul eder d=abcdefgthy
e=a[4:]
print(e)  # bu seferde başlangıc indexini verdik ,bitiş ve atlama vermedik atlama 1 kabul eder ,bitiş ise sonuna kadar  kabul eder e=efgthymno
f=a[:]  # bunun anlamı hepsini ver demek
print(f) # f= abcdefgthymno
s=a[:-1]  # bitiş indexi -1 oldu
print(s) # s= abcdefgthymn     burda sondan -1 inciye kadar gel dedik ,bunlar sondan başa kadar de indexlenebilir
ss=a[::2]   # atlama 2 verdik yani 2 şerli bir şekilde atlayacak
print(ss) #   aceghmo
ss=a[::3]   # atlama 3 verdik yani 3 şerli bir şekilde atlayacak
print(ss) #   adgyo
ss=a[::-1]  # string i tersden parcalıyor  atlama -1 verdik  başlama=1 ,bitiş =sonuna kadar
print(ss)    # onmyhtgfedcba  tersten yazdırdı
"""

"""
# stringlerin özellikleri
a="abcde"
b=len(a)
print(b)  # b=5

# a[2] ='t'  # python buna hata verir c++ daki gibi char arrayıne yaptıgın degiştirmeyi burda yapamazsın
"""
"""
# integer larda degişim yapabilirsin
a=[1,2,3,4] 
print(a)  #[1, 2, 3, 4]
a[1]=4
print(a)  # [1, 4, 3, 4]
"""
"""
s1="ebru"
s2="ceylan"
s3="ömür"
s4=s1+s2+s3
print(s4) # ebruceylanömür
s5= "python" * 3  # pythonpythonpython
print(s5)
s6=s1+" fuck you"
print(s6)  # ebru fuck you
"""








#video 17
"""
#int->float
#a=43  # ->43.0
#a=-13   # -> -13.0
print(a)
a=float(a)
print(a)
"""
"""
#float ->int
#a=3.14  # -> 3
#a=10.5562832323223232  # -> 10
a=-213.323  # -> -213
print(a)
a=int(a)
print(a)
"""
"""
# int -> str  ( string yani)
# not  233242fsdfsdf bunu yapamazsın  hepsi sayı olucak
#a=3232424  # -> 3232424  len =7
a=3.213   # ->3.213  len -> 5  noktayı bile sayar ,harf yazarsan hata alırsın
print(a)
a=str(a)
print(a)
a=len(a)
print(a)
"""
# str->int
a="23435"  # harf olamaz hata alırsın ascll tablosu var mı python da bilmiyorum
print(a)
a=int(a)
print(a)

# float dada aynı harfin cevrimi olmaz
# 3.12.23242  yazarsan hata alırsın
#  3.21343sfsdf hata alırsın





video 18


print(3.15,3,"murat")
a=5
b=3
print(a,b,a+b)  # araya 1 boşluk koyarak gösterir  5 3 8 yani
print("ebru\nceylan\nömür\nhepsi ilkaya saldırdı for \n\t\t\tlife")

print(type(a))  # hangi tür oldugunu söyler <class 'int'> gösterir
print(type(3.13))  # hangi tür oldugunu söyler <class 'float'> gösterir
print(type("murat"))  # hangi tür oldugunu söyler <class 'str'> gösterir

# eger print de araya boşluk koymak istemiyorsak sep functioni le boşluk yerine istedigini koyabilirsin
print(34,21,24,45)  #  34,21,24,45
print(34,21,24,45,sep="/")  #  34/21/24/45
print(34,21,24,45,sep="")  # 34212445 gösterir
print(34,21,24,45,sep="\n")  #   virgul yerine \n yapar alt alta 34\n21\n24\n45 gibi alt alta yazar
print("34","23","22","432",sep='\t')  # 34	23	22	432

# * yıldız  functioni var ,arraylari ayırmaya yarıyor one by one
print("python")  # python
print(*"python")  # p y t h o n   araya boşluk koydu istersen sep ilede boşluk yerine başka bir şey yazabilirsin
print(*"python",sep='.')   # p.y.t.h.o.n verir ,bu arada sep=' ' ile sep=" " denedim hata vermedi cift tırnak ile tek tırnak

# * i söyle durumlarda kullanabilirsin tbmm deki her harf arasına nokta koy  derseler
print("t","b","m","m",sep=".") # ya bunu yaparsın yada yıldız ile  -> t.b.m.m
print(*"tbmm",sep=".")   # t.b.m.m


# format function i var  eşleştirme yapıyor   {} {} {} ... {}.format(a,b,c,d ...inf) ne istersen sıraya göre eşleştirme yapar
# tabi bu {} ların içine 1,2,45, 0 felan yazarsan format içindeki 1,4,6,832 inci sayıyı alırlar
print( "{} {} {}" .format(1,4.2,"ebru"))  # 1 4.2 ebru
print( "{2} {0} fuck {1}" .format(1,4.2,"ebru"))  # ebru 1 4.2
print( "{:.2f} ve {:.1f} much {:.3f}".format(3.333,4.4444,5.55555) ) # 3.33 ve 4.4 much 5.556






video 19


# listeler e bakıcaz c++ daki arraylar gibi
# ya bölye tanıtırsın  variable name =[....]  yada variable name = list()
liste1=[1,3,4,"elma",3.42]
print(liste1[3])  # elma
print(liste1)  # [1, 3, 4, 'elma', 3.42]
print(liste1[-1])  # 3.42
print(liste1[-3])  # 4
liste2=list()  # boş liste
print(liste2)   # []

# len function can be used
a=len(liste1)
print(a)  #  5
print( liste1[len(liste1)-1] )  # -> 3.42    len =5 , -1 koyduk ki 4 olsun  list ler 0 dan başlar


# list lerde parcalama [ a: b: c]  a=başlangıc ,b= bitiş, c=artış  ,başlangıc artış için eger vermezsen 1 kabul eder
print(liste1[3::])   # ['elma', 3.42]
print(liste1[:2])   # [1, 3]   :2: aynı bok eger koymazsan kendi oto koyar
print(liste1[::3])  # [1, 'elma']

a=[1,2,3]
b=[4,5,6]
c=a+b
print(c)  #  [1, 2, 3, 4, 5, 6]
c1 = a+["ceylan fucked ilkay"]
print(c1)   # [1, 2, 3, 'ceylan fucked ilkay']
print(c1[3])

c2=a*3
print(c2)  # [1, 2, 3, 1, 2, 3, 1, 2, 3]
c2[0]="ebruuu01"
print(c2)  # ['ebruuu01', 2, 3, 1, 2, 3, 1, 2, 3]

d=list()
print(d)  # []
d.append("ebru")   # sona ekleme
d.append(2313)
d.append(3.232)
d.append([1,2,3,4,5,7])
d=d+[2,3,4,5,6]
print(d)   #  ['ebru', 2313, 3.232, [1, 2, 3, 4, 5, 7], 2, 3, 4, 5, 6]
d1=d.pop()  # silme yapıyoz içine bir şey yazmaz isen sondanki ni siler,iöine sayı  yazarsan  yazdıgın indexi siler
print(d1)  # 6
print(d)  # ['ebru', 2313, 3.232, [1, 2, 3, 4, 5, 7], 2, 3, 4, 5]
d1=d.pop(1)
print("silindi11: "+str(d1))   # silindi11: 2313
# string e cevirmezsan hata alırsın ,print de hepsi aynı cins olmalı
print(d)  # ['ebru', 3.232, [1, 2, 3, 4, 5, 7], 2, 3, 4, 5]
d1=d.pop(2)   # index 2 yi sildin
print("silindi: ",str(d1))  # silindi:  [1, 2, 3, 4, 5, 7]
print(d)    # ['ebru', 3.232, 2, 3, 4, 5]

# sorting
e=[2,3,5,7,8,94,21,213,65,876,1.2,1,346,0]
e.sort()
print(e)  # [0, 1, 1.2, 2, 3, 5, 7, 8, 21, 65, 94, 213, 346, 876]
# reverse sorting
e.sort(reverse=1)  # e.sort(reverse=True)  aynı bok True ile 1
print(e)  # [876, 346, 213, 94, 65, 21, 8, 7, 5, 3, 2, 1.2, 1, 0]

f=["php","c","C","ebur beklir","abcd","abdc","ABCD"]
f.sort()  # ascll tablosundaki dava var
print(f)   # ['ABCD', 'C', 'abcd', 'abdc', 'c', 'ebur beklir', 'php']

# iç içe list ler

arr=[1,2,3,[4,5,6],[7,8,9],[11,22,33]]
print( arr[3][2]  ) # 6 verir bunlar c++ daki 2 dimensional arraylar arr[i][j] gibi

x=[[12,4],[1,2],[3,4]]
print(len(x))
"""
# replace 

a="GCAT"
a.replace("T","U") # all T ler U ya dönüşür
print(a)
"""

"""
a='A'
b='b'
c='C' 
d=a.isalpha() and  b.isupper()   # 1 and 0  dan 0 gelir
# isalpha matlab daki gibi karakter mi diye bakıyor  and ve or kapısı bildigin 
# isupper da matlabdaki büyük harf  islower
print(d)  # False
"""




video 20



# tuples = demetler   ebru=() ile tanıtılır  mesela ebru=("ebru",1,2,3.4) gibi
# kullanım amacı ise c++ daki constant lar gibi içerik in degişmesini istemiyorsan kullan
"""
a=(1,2,3.23,"ebu bekir fuck you",1,2,2,1,1,1)
print(a[0])  # 1
print(a[3])   # ebu bekir fuck you
print(a[-1])  # ebu bekir fuck you
print(a[::-1])  #  ('ebu bekir fuck you', 3.23, 2, 1)
"""
"""
  # count  içerik sayma  count(x) x i arar  tuple da
a.count(1)
print( a.count(1)  )  # 5
print( a.count(2)  )   # 3
"""
# index  bu  index(x) x in location ini verir
a=(1,2,3.23,"ebu bekir fuck you",1,2,2,1,1,1)
a1=a.index(3.23)
print(a1)  # 2  



video 21

# dictionaries , bu tupes lardan farklı , sözlük gibi düşün ,aranan = anlam olay budur
# içerik degiştirebilir  {} ile yapılır tanıtılır , cagrıldıgında ise [] kullanılır tupes lardada ,list lerdede

dic={"bir":1,"iki":2,"üc":3,"dört":4 }
print(dic)  # {'bir': 1, 'iki': 2, 'üc': 3, 'dört': 4}
print( type(dic))  #  <class 'dict'>
dic1={}  # boş dictionary tanıtma yolu 1
print(dic1)  # {}
dic2=dict()  # boş dictionary tanıtma yolu 1
print(dic2)  # {}


# cagırma islemi
print ( dic["bir"] )  # 1
a=dic["bir"]
print(a)  # 1
print(dic["dört"] )  # 4

# dictionary sonradan ekleme icerik
print(dic)  #  {'bir': 1, 'iki': 2, 'üc': 3, 'dört': 4}
dic["beş"]=5
print(dic["beş"] )  #  5


# dictionary with lists
a={ "bir":[1,2,3,4],"iki": [[1,2],[3,4],[5,6]],"üc":15 }
print( a["bir"])  # [1, 2, 3, 4]
print ( a["iki"][1] )    # [3, 4]
print ( a["iki"][0][1] )   #  2
# icerik degiştirme
print(a)  # {'bir': [1, 2, 3, 4], 'iki': [[1, 2], [3, 4], [5, 6]], 'üc': 15}
a["üc"]=100
print(a)  # {'bir': [1, 2, 3, 4], 'iki': [[1, 2], [3, 4], [5, 6]], 'üc': 100}
a["iki"][1][1]=50
print(  a["iki"][1]  )  #  [3, 50]
print(a)  #  {'bir': [1, 2, 3, 4], 'iki': [[1, 2], [3, 50], [5, 6]], 'üc': 100}
a["iki"][1][1]+=1
print(a)   #  {'bir': [1, 2, 3, 4], 'iki': [[1, 2], [3, 51], [5, 6]], 'üc': 100}

# strinlerde kullanılabilir

dic3={"bir":"ebru","iki":"ceylan","üc":"ömür"}
print(dic3)  #  {'bir': 'ebru', 'iki': 'ceylan', 'üc': 'ömür'}
print( dic3["iki"] )  # ceylan


# dic içinde dic de kullanabilir sin

a={ "sayılar":{ "bir":1,"iki":2,"üc":3 },"kadınlar":{"yaz":"ebru","kıs":"ceylan","ilkbahar":"ömür","sonbahar":"rae lil"  }   }
print(a["sayılar"]["bir"] )  # 1
print(a["kadınlar"]["ilkbahar"] + "'ü 3 kere sikim")  # ömür
print(a["kadınlar"])  # {'yaz': 'ebru', 'kıs': 'ceylan', 'ilkbahar': 'ömür', 'sonbahar': 'rae lil'}

# 3 function var , keys bize arananları verir yani  bir ,yaz,kıs, üc gibi,
# values= bize içerik verir yani 1, 2, 3,ebru ,rae lil,
# items bize aranan ve icerik i verir beraber

print(a.keys() )  # dict_keys(['sayılar', 'kadınlar'])
print( a.values() )   # bu biraz uzun  normalde a={"bir":1,"iki":2} felan yazsak bize  # dict_values([1,2]) verir
#dict_values([{'bir': 1, 'iki': 2, 'üc': 3}, {'yaz': 'ebru', 'kıs': 'ceylan', 'ilkbahar': 'ömür', 'sonbahar': 'rae lil'}])
print(a.items() )
# dict_items([('sayılar', {'bir': 1, 'iki': 2, 'üc': 3}), ('kadınlar', {'yaz': 'ebru', 'kıs': 'ceylan', 'ilkbahar': 'ömür', 'sonbahar': 'rae lil'})])

# kolaylık olsun diye key value ,item kolayda deneyelim

dic={"bir":1,"iki":2,"üc":3,"dört":4 }
print(dic.keys() )  # dict_keys(['bir', 'iki', 'üc', 'dört'])
print( dic.values() )  # dict_values([1, 2, 3, 4])
print(dic.items() )  # dict_items([('bir', 1), ('iki', 2), ('üc', 3), ('dört', 4)])




c=[1,2,3,49]
c.reverse()
print (c)  # [49, 3, 2, 1]
s="sadsad"
s=s.replace("a","fuck ") 
print (s)  # sfuck dsfuck d
a=5
b=3
a,b=b,a
print(a,b)  # 3 5





video 22

# taking input  from users
# input aldıgında genel olarak str cinsinden verir
name=input("give a name: ")
print(name)
print(type(name))  # <class 'str'>
age=input("give a number")
print(age)  # input a ne yazarsan artık yalnız hala str cinsinden ne olabilir
# mesela 3 aldım diyelim 3*3 yapsan sana 333 yazar ama 9 yazmaz cünkü str
print( age*3 ) #   input:2 yazdım ve -> 222 verir
# düzeltmek için int e cevir
age=int(age)
print ( age*3 ) # input:3 yazdım ve -> verir sana9
# yada line dan tasarruf

a= int(input("give a number :"))
print(a)  # ne verirsen 44 yazdım 44 verdi int cinsinden




"""
# kod denemesi 
a=input("name: ")
b=input("nationality: ")
c=input("gender: ")
informations=[a,b,c]
print("informations are taken.")
print("name:{}\nnationality:{}\ngender:{}".format(informations[0],informations[1],informations[2]))
print("end.");
"""

"""
#kod denemesi delta discriminant
a=int(input("a: "))
b=int(input("b: "))
c=int(input("c: "))
delta= b**2 - 4 * a * c
first= (-b-delta**(1/2))/(2*a)
second= (-b+delta**(1/2))/(2*a)

print(first,"\n",second) 
# first (-0.7500000000000001-1.1989578808281798j) 
# second (-0.7499999999999999+1.1989578808281798j)
"""



"""
# problem 1
a=int(input("a: "))
b=int(input("b: "))
c=int(input("c: "))
print("{} * {} * {} = {} dir. ".format(a,b,c,a*b*c))
"""
"""
# problem 2
a=float(input("boy: "))  # 1.80
b=float(input("kilo: "))  # 88.8
print(b/(a**2))  # 49.33333333333333
"""
"""
# problem 3
a=int(input(" kilometre :"))
b=float(input("yakıt birim fiyatı : "))
print("tutar: {} dolar".format(a*b) )
"""
"""
# problem 4
a=(input("name: "))
b=(input("surname: "))
c=(input("number: "))
print("{}\n{}\n{}".format(a,b,c) )
"""
"""
# problem 5
a=int(input())
b=int(input())
print("Değiştirilmeden Önce Değerler\na: {} b: {}\n".format(a,b))
a,b=b,a
print("Değiştirildikten Sonraki Değerler\na: {} b: {}\n".format(a,b))
"""
"""
#problem 6
a=int(input())  # 3
b=int(input())  # 4
c= ( (a**2) + (b**2) )**0.5
print(int(c))  # 5
"""







if else elif deneme 


# and  or  var python da bu c deki && ile || ile aynı bok
a= 3 != 4 and 2==2
print(a) # True   gibi durumlar


# c deki if elseif else durumu var ve bu python if elif else vardır
# burda parantez kullanadabilirsin kullanmayabilirsin
# burda if elif else in sonuna : koymalısın kural
a=3
b=4
c=3
if a!=b and a!=c:  # or if (a!=b and a!=c):  aynı bok
    print("they are equal.")
elif a==b or b>a:
    print("b>a dan")
else:
    print("fuck off")






if elif else
print("""
 **********
 select one operation : sum,subtract,multiply,divide
 num1:
 num2:
***********
""")

ch=input("operation: ")
a=int(input("num1: "))
a1=int(input("num2: "))

if ch=='+':
    a2=a+a1
elif ch=='-':
    a2 = a - a1
elif ch=='*':
    a2=a*a1
elif ch=='/':
    a2=a/a1
print("{} {} {} = {}".format(a,ch,a1,a2))
print("""
end...    
""")








# problem 1  video 32

# boy=float(input("boy: "))
# kilo=int(input("kilo: "))
boy=1.88
kilo=90
bki=kilo/(boy**2)
if (bki < 18.5):
    print("Zayıf")
elif bki>=18.5 and bki<25:
    print("Normal")
elif bki>=25 and bki<30:
    print("Fazla Kilolu")
else:
    print("Obez")

print("bki: {:.2f} ".format(bki))






# problem 2 

# problem 2

a=int(input("num1: "))
a1=int(input("num1: "))
a2=int(input("num1: "))
b=[a,a1,a2]
b.sort()
print(b[2])






# problem 3

a=int(input("vize1: "))
a1=int(input("vize2: "))
a2=int(input("final: "))
vize1=a*0.3
vize2=a1*0.3
final=a2*0.4
sum=vize1+vize2+final
if(sum>=90):
    print("AA")
elif(sum>=85):
    print("BA")
elif(sum>=80):
    print("BB")
elif(sum>=75):
    print("CB")
elif(sum>=70):
    print("CC")
elif(sum>=65):
    print("DC")
elif(sum>=60):
    print("DD")
elif(sum>=55):
    print("FD")
else:
    print("FF")












# problem 4

shape=input("the shape of geometical structure: ")
if "dörtgen"==shape:
    a=int(input("kenar1: "))
    a1 = int(input("kenar2: "))
    a2 = int(input("kenar3: "))
    a3 = int(input("kenar4: "))
    if (a==a1 and a==a2 and a==a3): # ben ise direk (a==a1==a2==a3) yaptım calıştı
        print("kare")
    elif (a==a2 and a1==a3):
        print("dikdörtgen")
    else:
        print("dörtgen")

elif shape=="ücgen":
    a = int(input("kenar1: "))
    b = int(input("kenar2: "))
    c = int(input("kenar3: "))
    if( abs(a+b) > c and abs(a+c) > b and abs(b+c) > a ):
        if(a == b and a==c):
            print("eşkenar üçgen.")
        elif( (a==b and a!=c ) or (a==c and a!= b) or (b==c and b!=a) ):
            print("ikiz kenar ücgen.")
        else:
            print("Çeşitkenar Üçgen.")
    else:
        print("üçgen belirtmiyor")
else:
    print("Geçersiz Şekil.")



















 # video 35
 # loop olaylarına bakıcaz for while felan
 # şimdi in fornksiyonunu görücez  bu bize aranan malın  var olup olmadıgına bakıp
 # true or false degeri veriyor aranan dosyada
 #  syntax:  aranan mal  in  dosya

a=1 in [0,2,3,1,4]
print( a ) # True
print( 1 in [0,2,3,1,4]  )  # True
print ( 1 in [2,3,4]  )  #False

print( 'a' in 'ebru')  # False
print('b' in 'ebru')  # true

print( 4 in (1,2,3))  # false
print( not 4 in (1,2,3) )  # true

 # bu in operatoru  for döngülerinde de kullanılıyor



 #for döngüsü in function i ile
 # burda ne oldu dersen ,ebru bir variable name , in : aramayı bunun ile baglıyoruz ,
 # liste de aranan malı bu listede arıyoruz ,ebru 1,2,3,4,5,6 olmasının sebebi:
 # listenin içindeki elemanları alması ,  1,2,3,4,5,6 yerine 88 77 66 55 44 yazsam
 # output bize 88 77 66 55 44 yazdırırdı
# liste=[88,77,66,55,44]  # istersen dene
liste=[1,2,3,4,5,6]
for ebru in liste:
     print(ebru)
     """
     output:
     1
     2
     3
     4
     5
     6
"""



# experiment 1   ,toplayalım sayıları
arr=[10,20,30,40,50]
sum=0
for ceylan in arr:
    sum+=ceylan
    print("the sum: {} and the ceylan: {}".format(sum,ceylan))
"""  out put : 
the sum: 10 and the ceylan: 10
the sum: 30 and the ceylan: 20
the sum: 60 and the ceylan: 30
the sum: 100 and the ceylan: 40
the sum: 150 and the ceylan: 50
"""


#experiment 2  even odd
arr=[3,4,5,6,7,8]
for ömür in arr:
    if (ömür%2==0):
        print(ömür)  # output alt alta  4 6 8



# experiment 3 biz bunu str lerdede yapabiliriz
ch='python'
for ebru in ch:
    print(ebru)
""" output:
p
y
t
h
o
n
"""

# experiment 4  cıkanı 3 ile carp
ch='python'
for ebru in ch:
    print(ebru*3)
"""
ppp
yyy
ttt
hhh
ooo
nnn
"""





# demetler de kullanılabilir

demet=(1,2,3,4,5,6,"ebru")
for a in demet:
    print(a)
"""
1
2
3
4
5
6
ebru
"""





# ya ben list içinde demet verirsem ve multi dimensional lı olursa ?

arr1=[(1,2),(3,4),(5,6),(7,8)]
for b in arr1:
    print(b)
"""  ama burda  b içinde verdi ya ben tek tek istersem ,aşagıdaki kodda var
(1, 2)
(3, 4)
(5, 6)
(7, 8)
"""

arr1=[(1,2),(3,4),(5,6),(7,8)]
for (i,j) in arr1:
    print("i:{} and j: {} ".format(i,j) )
"""
i:1 and j: 2 
i:3 and j: 4 
i:5 and j: 6 
i:7 and j: 8 
"""



# 3 lüde yapabilirsin 3 degişken

arr1=[(1,2,3),(3,4,5),(5,6,7),(7,8,9)]
for (i,j,k) in arr1:
    print("i:{} and j: {} and k: {}".format(i,j,k) )
"""
i:1 and j: 2 and k: 3
i:3 and j: 4 and k: 5
i:5 and j: 6 and k: 7
i:7 and j: 8 and k: 9
"""




# carpma da yapabiliriz
arr1=[(1,2,3),(3,4,5),(5,6,7),(7,8,9)]
for (i,j,k) in arr1:
    print("i:{} and j: {} and k: {} and multiplied formation {}".format(i,j,k, i*j*k ) )
"""
i:1 and j: 2 and k: 3 and multiplied formation 6
i:3 and j: 4 and k: 5 and multiplied formation 60
i:5 and j: 6 and k: 7 and multiplied formation 210
i:7 and j: 8 and k: 9 and multiplied formation 504
"""



# dictionary lerde for ile kullanılabilir  bu item value  key fonksiyonlar felanda

dic={ "bir":1,"iki":2,"üc":3 ,"dört":4 }
for ebru in dic:  #  for ebru in dic.keys(): bunu yazsan aynı sonucu alırsın alttaki ile bir iki felan
    print(ebru)
""" burda keys leri verir keys yazmasak bile 
bir
iki
üc
dört
"""


# value ları alırsın ebru içinde
dic={ "bir":1,"iki":2,"üc":3 ,"dört":4 }
for ebru in dic.values():
    print(ebru)
"""
1
2
3
4
"""



dic={ "bir":1,"iki":2,"üc":3 ,"dört":4 }
for ebru in dic.items():
    print(ebru)
"""
('bir', 1)
('iki', 2)
('üc', 3)
('dört', 4)
"""
# bu yukaridakilere tek tek de alabilir ayrı variable içinde nasılmı aşagıda


dic={ "bir":1,"iki":2,"üc":3 ,"dört":4 }
for [i,j] in dic.items():
    print("i:{} and j:{}".format(i,j))  # hoca böyle printlemiş print("i: ",i,"j: ",j)
"""
i:bir and j:1
i:iki and j:2
i:üc and j:3
i:dört and j:4
"""










video 36 and video 37

  # while deneme
i=0
while i<10:
    print(i)
    i+=1


print("range")
# range ,range(başlangıc,final,increment)  bu başlangıctan  final a kadar
#  increment sayısını baz alarak depolama yapar , eger increment yazmaz isen 1 kabul eder
# example
a=range(2,15)
print(a[1])   #  3
a=range(2,15,2)
print(a[1])   #  4

# while  + range
i=0

while (i<len(range(10))+1):
    print(i)  # 0 1 2 3 4 .... 10  alt alta yazar
    i+=1

b=range(20)
print(b[0],b[18],b[19])  # 0 18 19



a=range(2,20)
print(*a)  
# ve eger illa a[1] gibi yazmak istemiyorsan direk başına yıldız koy hepsini gösterir
# 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19



b=range(20,2,-1)
print(*b)
# 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3


a=range(0,20)

for ebru in range(1,10):
    print("*"*ebru)

"""  output:
*
**
***
****
*****
******
*******
********
*********
"""








a=[2,3,4,5,6,7,8]
i=0
while i<len(a):
    print("fuck you",i)
    i+=1
"""
fuck you 0
fuck you 1
fuck you 2
fuck you 3
fuck you 4
fuck you 5
fuck you 6
"""





fibonacci
num=int(input("give a num: "))

i=0
first=0
second=1
sum1=0

for i in range(0,num):
    if i==0:
        print(first)
        first=second
        second=sum1
        continue
        
    else:
        sum1=first+second
        print("sum:",str(sum1))
    first=second
    second=sum1










# amac burda  listedeki elemanları başka bir lsiteye atma
# list comprehension 
"""
# bildigimiz yöntem öncelerden
arr1=[1,2,3,4,5]
arr2=[]
for ebru in arr1:
    arr2.append(ebru)
print("arr2:",arr2)  # arr2: [1, 2, 3, 4, 5]
"""
"""
# şimdi ise kısa bir yol
#  burda for ebru in arr1 ayrı bir blok , ebru ise ayrı bir blok,for la başlayan kısmı biliyorsun zaten  for içindeki ebru yu ,for öncesindeki ebruya gecirir ve arr2 ye atar
arr1=[1,2,3,4,5]
arr2=[ebru for ebru in arr1 ]
print("arr2: ",arr2)  # arr2:  [1, 2, 3, 4, 5]

# carpma yaparak atalım
arr3=[ceylan*2 for ceylan in arr1]
print("arr3: ",arr3)   # arr3:  [2, 4, 6, 8, 10]
"""
"""
# string yapsak str yani
ch="python"
arr1=[i for i in ch]
print(type(arr1),"arr1: ",arr1) 
# <class 'list'> arr1:  ['p', 'y', 't', 'h', 'o', 'n']

arr2=[i*3 for i in ch]
print(type(arr2),"arr2: ",arr2)
# <class 'list'> arr2:  ['ppp', 'yyy', 'ttt', 'hhh', 'ooo', 'nnn']
"""

# iç içe listler olursa   2 dimensional
arr1=[[1,2],[3,4],[5,6]]

arr2=[ [i,j] for i,j in arr1 ]
print(type(arr2),arr2)  # <class 'list'> [[1, 2], [3, 4], [5, 6]]

arr3=[ (i,j) for i,j in arr1 ]
print(type(arr3),arr3)  # <class 'list'> [(1, 2), (3, 4), (5, 6)]
arr3[1][1]=11  # tuple  ani demet oldugu için degişiklik yapamadık
print(type(arr3),arr3)  # hata aldın

arr4=[ i*j for i,j in arr1 ]
print(type(arr4),arr4)  # <class 'list'> [2, 12, 30]

# 3 veya daha fazla  dimensionallı
# normalde
lis1=[[1,2,3],[4,5,6,7,8],[9,10,11,12,13,14,15]]
for i in lis1:
    print(i)
    """
    output bize bunu verir
[1, 2, 3]
[4, 5, 6, 7, 8]
[9, 10, 11, 12, 13, 14, 15]
    """

lis1=[[1,2,3],[4,5,6,7,8],[9,10,11,12,13,14,15]]
for i in lis1:
    for x in i:
        print(x)
""" output :
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
"""


lis1=[[1,2,3],[4,5,6,7,8],[9,10,11,12,13,14,15]]
lis2=list()
for i in lis1:
    for x in i:
       lis2.append(x)
print(lis2) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]


# kısa  yol
lis4=[j for i in lis1 for j in i]
print(lis4) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# 2 dimensional lı for döngüsü  iç gösterim neler oluyor içerde 
#  list içindeki 1 inci listin length'i 3 oldugu için 3 defa ,2 inci 5 defa  ,ücüncü ise 7 defa tekrar var
lis3=[i for i in lis1 for j in i]
print(lis3)
""" normalde yan yana yazarda ben sayfa sola dogru kaymasın diye alta yazdım unutma yan yana yazar
[[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6, 7, 8], [4, 5, 6, 7, 8], [4, 5, 6,7, 8], [4, 5, 6, 7, 8], [4, 5, 6, 7, 8],
 [9, 10, 11, 12, 13, 14, 15], [9,10, 11, 12, 13, 14, 15], [9, 10, 11, 12, 13, 14, 15], [9, 10, 11, 12, 13,14, 15],
 [9, 10, 11, 12, 13, 14, 15], [9, 10, 11, 12, 13, 14, 15], [9, 10, 11, 12, 13, 14, 15]]
"""









video 44
problem 1

num=int(input(("num: ")))
sum=0
for i in range(1,num//2+1):
    if num%i==0:
        sum+=i
        
if sum==num:
    print("perfect number.")
else:
    print("not perfect number.")
"""
hocanınki
sayı = int(input("Sayı:"))

i = 1
toplam = 0
while (i < sayı):
    if (sayı % i == 0):
        toplam += i
    i += 1

if (toplam == sayı):
    print(sayı,"mükemmel bir sayıdır.")
else:
    print(sayı,"mükemmel bir sayı değildir.")
"""














"""
Problem 2
Kullanıcıdan aldığınız bir sayının "Armstrong" sayısı olup olmadığını bulmaya çalışın.

Örnek olarak, Bir sayı eğer 4 basamaklı ise ve oluşturan rakamlardan herbirinin 4. kuvvetinin toplamı( 3 basamaklı sayılar için 3.kuvveti ) o sayıya eşitse bu sayıya "Armstrong" sayısı denir.

Örnek olarak : 1634 = 1^4 + 6^4 + 3^4 + 4^4
"""

num=(input(("num: ")))
num1=int(num)
num=list(num)
#print("list num:",num)
sum1=0
i=0
j=0
while i <(len(num)):
    j=int(num[i])
    j=j**len(num)
    #print("num[i] {} and len {} and j {}".format(num[i],len(num),j))
    sum1+=j
   # print("sum1: ",sum1)
    i+=1
if sum1==num1:
    print("armstrong.")
else:
    print("not armstrong")

"""
hocanın yolu
sayı = input("Sayı:")
basamak_sayisi = len(sayı)
sayı = int(sayı)
basamak = 0
toplam = 0

gecici_sayı = sayı

while (gecici_sayı > 0):
    
    basamak = gecici_sayı % 10
    
    toplam += basamak ** basamak_sayisi
    
    gecici_sayı //= 10
    

if (toplam == sayı):
    print(sayı,"bir armstrong sayısıdır.")
else:
    print(sayı,"bir armstrong sayısı değildir.")
"""












"""
Problem 3
1'den 10'kadar olan sayılarla ekrana çarpım tablosu bastırmaya çalışın.

İpucu: İç içe 2 tane for döngüsü kullanın. Aynı zamanda sayıları range() fonksiyonunu kullanarak elde edin.
"""
range(1,11)
for i in range(1,11):
    print("*****************************************")
    for j in range(1,11):
        print("{} * {} = {}".format(i,j,i*j) ) 














"""
Problem 4
Her bir while döngüsünde kullanıcıdan bir sayı alın ve kullanıcının girdiği sayıları "toplam" isimli bir değişkene ekleyin. Kullanıcı "q" tuşuna bastığı zaman döngüyü sonlandırın ve ekrana "toplam değişkenini" bastırın.

İpucu : while döngüsünü sonsuz koşulla başlatın ve kullanıcı q'ya basarsa döngüyü break ile sonlandırın.
"""
sum=0
while True:
    a=input("give : ")
    if a=='q':
        break
    sum+=int(a)
print("sum:",sum)    
    
    






"""
Problem 5
1'den 100'e kadar olan sayılardan sadece 3'e bölünen sayıları ekrana bastırın. Bu işlemi continue ile yapmaya çalışın..
"""
j=2
for i in range(1,101):
    if i%3==0:
        j=2
        while j<i//2+1:
            if j!=3:
                if (i%j==0):
                    break
            j+=1
        if (i%j==0):
            continue
        print("ebruyu {} kere siktim".format(i))









"""
Problem 6
Buradaki problemin çözümünü derslerimizde özellikle öğrenmedik. Burada mantık yürüterek ve list comprehension kullanarak 1'den 100'e kadar olan sayılardan sadece çift sayıları bir listeye atmayı yapmayı çalışın.

Not: Programlamada her detayı öğrenemeyiz. Bunun için bazı yerlerde deneme yanılma yoluyla da öğrendiğimiz şeyler olur. Bu problemde deneme yanılma yoluyla list comprehension'ın koşullu durumlarla kullanımını öğreneceksiniz.

İpucu: Basit düşünmeye çalışın.

"""

arr=[*range(1,101)]
b=[i for i in arr if i%2==0 ]
print(b)


"""
hocanınki
liste = [x for x in range(1,101) if x % 2 == 0]
print(liste)
"""














video 46
# methodlar  list ler için
lis=[1,2,3,4,5]
print(type(lis)," - ",lis)  # <class 'list'>  -  [1, 2, 3, 4, 5]

# insertion
lis.insert(2,"ebru fuck") 
print(lis)  # [1, 2, 'ebru fuck', 3, 4, 5]

# append
lis.append(3.14)
print(lis)  # [1, 2, 'ebru fuck', 3, 4, 5, 3.14]


# pop ,silme
lis.pop()
print(lis)  # [1, 2, 'ebru fuck', 3, 4, 5]

lis.pop(1)
print(lis)  # [1, 'ebru fuck', 3, 4, 5]









video 47
# functions ,but we don't have int main() so then this is way of functions done ,ve illada üstte olucak functionlar ,c deki gibi int main in altına yazamassın
"""
def ebru():
    print("fuck you",31,"kere")  # fuck you 31 kere

ebru()
"""
"""
def ebru(isim):
    print("fuck you",isim,31,"kere")  # fuck you ceylan 31 kere
    
ebru("ceylan")
"""
"""
def topla(a,b,c):
    print("the sum:",a+b+c)  
topla(3,4,5)  # the sum: 12
topla(10,20,30) # the sum: 60
"""


"""
def factorial(num):
    fac=1
    if num==0 or num==1:
       fac=1
    else:
        while(num>=1):
            fac*=num
            num-=1
    print("factorial is:",fac)

factorial(5) # factorial is: 120
factorial(0) # factorial is: 1
"""







video 48
# return lu yapalım  , eger return kullanmazsan void olarak algılar
"""
def toplama(a,b,c):
    return a+b+c
"""
"""
a,b,c=3,4,5
d=toplama(a,b,c)
print("toplam:",d)  # toplam: 12
"""
"""
def carpma(a,b,c):
    return a*b*c
d=carpma(a,b,c)
print("carpma:",d)  # carpma: 60
"""
"""
# iç ice nasıl olur
def toplama(a):
    return a+4
def carpma(a):
    return a*8
def bölme(e):
    return e//4
print("there is :",toplama(bölme(carpma(5))))  # there is : 14
"""







 video 49
"""
# c++ da ögrendigimiz olay functionda bir şey yazmak istemezsen otomatik yazılan degeri alır 
def identity(name="ebru",gender="female",age=32):
    print(name,gender,age)
identity()  # ebru female 32
identity("ceylan") # ceylan female 32
identity("ilkay","male") # ilkay male 32
identity("ilkay","male",24) # ilkay male 24
# ya sadece gender yazmak istesek yada age ,o zaman belirtmek zorundayız 
# sıralama var age i vermek isterken yazdıgın name variable ine gider
identity(gender="male")  # ebru male 32
identity(age=25)  # ebru female 25
"""
"""
# dönüşüm   tuple -> list
a=(1,2,3,4)
print(type(a),a)  # <class 'tuple'> (1, 2, 3, 4)
b=list(a)
print(type(b),b," - ",b[2]) # <class 'list'> [1, 2, 3, 4]  -  3
"""



# ya biz functionda 3 variable varken 4 tane yazarsak ne olur = hata verir
# esnek sayıda degerler konusu ile yapılabilir hatadan kurtulursun
# functiona gidenler tuple yani demet olarak gider
#  * yıldı kullanırız
"""
def top(*a):
    print(type(a),a)  # <class 'tuple'> (3, 4, 5) gibi
    print( sum(a) )  # 12
top(3,4,5)
top(3,4,5,6,7,8,9)  # <class 'tuple'> (3, 4, 5, 6, 7, 8, 9)  and \n 42
"""
"""
def toplama(*b):
    summ=0
    print("len of b: ",(len(b)))# len of b:4 ,# int(len(b)) ile yazdıgm aynı
    print("b:",b)  # b: (2, 3, 4, 5)
    for i in range(0,int(len(b))):
        print("i:",i)  # i= 0 1 2 3
        summ+=b[i]
    print("sum:",summ)  # sum: 14
toplama(2,3,4,5)    
  """  
    








 video 50
# global ve local variables , function in içinde oluşturdugun variable lar local variable lardır ,globalda aynı isimde oluştursan bile farketmez tabi function içine global variable name felan yazarsan anca eşleşir
# normalde if else de felan kullandıgın yani python da function dısında tabi class sınıf felan onları katma ilerde görcen ,bunların dısında herşey aslında global variable if else de felan oluşturdugun
# örnek
"""        
num=5
def fuck():
    num=2
    print(num)
fuck()
print(num)
"""
""" cıktısını verir cünkü fuck içindeki local ,def üstündeki global 
2
5    
"""


"""
def fuck():
    global num1
    num1=4
    print(num1)  # 4 
num1=5
fuck()
print(num1)  # 4 
"""
"""  # yukarıdaki bok la aynı ha fuck in ustüne yazmıssın he def in üstüne
 # yeterki  cagırma function inin üstünde olsun
num1=5
def fuck():
    global num1 
    num1=4
    print(num1)  $ 4
fuck()
print(num1)  # 4
"""

s="python"
s1="c++"
def ss():
    s="fuck you"
    global s1
    s1="html"
    print(s)  # fuck you
    print(s1)  # html
    
ss()
print(s)  # python
print(s1) # html

    
    



# reverse string example


s="python is a bitch"
print(s)  # python is a bitch
s=s[::-1]
print(s)  # hctib a si nohtyp






video 51




#lambda özelligini görücez ,list comprehension gibi functionlarda cok uzun olmayanlar için bu lambda yı kullan kısa ve iyi yani mesela toplama için
# normalde böyle yapardın
"""
def toplama(a,b,c):
    return a+b+c
print( toplama(3,4,5) ) # 12

# lambda kısa yol ile
ebru= lambda x,y,z : x+y+z    #  : bunun anlamı return  ,x,y,z de variableler
#   : den sonrası da yapılacak islemler
print( ebru(10,20,30) )  # 60
"""

def tekcift(a):
    return a%2 == 0
print(tekcift(2))   # True
print(tekcift(3))   # False

# lambda ile
tekcif=lambda ebru : ebru % 2 == 0
print( tekcif(15))  # False
print( tekcif(16))  # True


# lambda ile string reverse
reverse=lambda x : x[::-1]
ebru="ceylan"
print(ebru,reverse(ebru))  # ceylan nalyec









"""
21321edsao2103 ,de sadece sayıları göstersin
"""
 # 1 inci yol
num=input("num: ")
lis=0
j=1
for i in num[::-1]:
    if(i>="0" and i<="9"):
        lis+=int(i)*j
        j*=10
print(lis)

"""  # 2inci yol
num=input("num: ")
lis=0
j=1
for i in num:
    if(i>="0" and i<="9"):
        lis+=int(i)*j
        j*=10
print(lis)

lis=str(lis)
lis=lis[::-1]
lis=int(lis)
print(lis)
"""






ch=input("process ch: ")
if(ch =='+'):
    num1=int(input("num1: "))
    num2=int(input("num2: "))
    print("sum:",num1+num2)
elif(ch =='-'):
    num1=int(input("num1: "))
    num2=int(input("num2: "))
    print("subract:",num1-num2)
elif(ch =='*'):
    num1=int(input("num1: "))
    num2=int(input("num2: "))
    print("multiply:",num1*num2)
elif(ch =='/'):
    num1=int(input("num1: "))
    num2=int(input("num2: "))
    print("divide:",num1/num2)
elif(ch =='^'):
    num1=int(input("num1: "))
    num2=int(input("num2: "))
    print("power:",num1**num2)







"""
convert char array to int
"""
b=(input("num:" ))
a=0

for i in b:
    a=10*a+int(i)
print(type(a),"a:",a)  













"""
obeb okek bul
 okek 8 10  output 40 vericek 
 obeb 8 10  output 2 vericek
"""

# obeb
def obeb(a,b):
    num=2
    minn=min(a,b)  
    print("min fucntion ı dendim",minn)  # 8
    c=0
    while (num<minn):
        if ((a%num == 0) and (b%num==0)):
            c=num
        num+=1
    return c
num1=int(input("num1:"))
num2=int(input("num2:"))
print("obeb:",obeb(num1,num2))
print("min:",min(num1,num2))  # num1 8 num2 10 olsun   bize 8 verir
print("max:",max(num1,num2))  # num1 8 num2 10 olsun   bize 10 verir






# okek
def okek(a,b):
    maxx=max(a,b)  
    print("max fucntion ı dendim",maxx)  # 8
    c=0
    while (True):
        if (( maxx%a  == 0) and (maxx%b == 0)):
            c=maxx
            break
        maxx+=1
    return c
num1=int(input("num1:"))
num2=int(input("num2:"))
print("obeb:",okek(num1,num2))
print("min:",min(num1,num2))  # num1 8 num2 10 olsun   bize 8 verir
print("max:",max(num1,num2))  # num1 8 num2 10 olsun   bize 10 verir










video 54
"""
Problem 1
1'den 1000'e kadar olan sayılardan mükemmel sayı olanları ekrana yazdırın. Bunun için bir sayının mükemmel olup olmadığını dönen bir tane fonksiyon yazın.

Bir sayının bölenlerinin toplamı kendine eşitse bu sayı mükemmel bir sayıdır. Örnek olarak 6 mükemmel bir sayıdır (1 + 2 + 3 = 6).
"""
def muk(num):
    temp1=num
    summ=0
    for i in range(1,temp1//2+1):
        if temp1%i==0:
            summ+=i
    if summ==num:        
        return True
    else:
        return False
    
for i in range(1,1000):
    if muk(i)==True:
        print("muk:",i)  # 6   28 496




"""
Problem 2
Kullanıcıdan 2 tane sayı alarak bu sayıların en büyük ortak bölenini (EBOB) dönen bir tane fonksiyon yazın.

Problem için şu siteye bakabilirsiniz;
"""

def ebob(a,b):
    minn=min(a,b)
    i=0
    for j in range(2,minn):
        if a%j==0 and b%j==0:
            i=j
    return i

a=int(input("a:"))
b=int(input("b:"))
print("ebob of {} {} is {}".format(a,b,ebob(a,b)) )



"""
Problem 3
Kullanıcıdan 2 tane sayı alarak bu sayıların en küçük ortak katlarını (EKOK) dönen bir tane fonksiyon yazın.

Problem için şu siteye bakabilirsiniz;
"""

def ekok(a,b):
    maxx=max(a,b)
    while True:
        if(maxx%a==0 and maxx%b==0):
            break
        maxx+=1
    return maxx

a=int(input("a:"))
b=int(input("b:"))
print("ekok of {} {} is {}".format(a,b,ekok(a,b)) )







"""
Problem 4
Kullanıcıdan 2 basamaklı bir sayı alın ve bu sayının okunuşunu bulan bir fonksiyon yazın.

Örnek: 97 ---------> Doksan Yedi

"""
# dictionary kullan
dic={1:"bir",2:"iki",3:"üc",4:"dört",5:"bes",6:"altı",7:"yedi",8:"sekiz",9:"dokuz" 
,10:"on",20:"yirmi",30:"okuz",40:"kırk",50:"elli",60:"altmıs",70:"yetmiş",80:"seksen",90:"doksan"}

num=input("num:")
digit1=int(num[0])*10
digit2=int(num[1])
print("num:{} -----> {}".format(num,dic[digit1]+dic[digit2]))

"""
hocanın cözümü
"""
birler =  ["ff","Bir","İki","Üç","Dört","Beş","Altı","Yedi","Sekiz","Dokuz"]
onlar = ["","On","Yirmi","Otuz","Kırk","Elli","Altmış","Yetmiş","Seksen","Doksan"]

print(birler[0],onlar[2])  # ff Yirmi
"""
birler =  ["","Bir","İki","Üç","Dört","Beş","Altı","Yedi","Sekiz","Dokuz"]
onlar = ["","On","Yirmi","Otuz","Kırk","Elli","Altmış","Yetmiş","Seksen","Doksan"]

def okunus(sayı):
    birinci = sayı % 10
    ikinci = sayı // 10
    
    return onlar[ikinci] + " " + birler[birinci]

    
sayı =  int(input("Sayı:"))

print(okunus(sayı))

"""










"""
1'den 100'e kadar olan sayılardan pisagor üçgeni oluşturanları ekrana yazdıran bir fonksiyon yazın.(a <= 100,b <= 100)
"""

def pis():
    lis=[]
    for a in range(1,101):
        for b in range(1,101):
            c=(a**2 + b**2)**0.5
            if  c==int(c):
                lis.append([a,b,c])
    return lis

for i in pis():
    print(i)









video 57
# moduller ,yani math kütüphanesi
"""
math kütüphanesindeki bazı seyler
asin, acos,atan,ceil,floor,factorial,cos,cosh,exp,fabs,fmod,copysign,degrees
log,log10,log2,modf,nan,pow,sqrt,radians,tanh,pi 
gibi bir cok özel tanımlanmıs fonksiyon var
1 inci yol tanımlamak için
eger   from math import *   bunu yazarsan  math kütüphanesindeki her şeyi dahil edersin
mesela print( factorial(5)) # bize 120 verir,
2 inci yol tanımlamak için
import math
math.factorial(5) gibi

"""
"""
asin, acos,atan,ceil,floor,factorial,cos,cosh,exp,
fabs,fmod,copysign,degrees,log,log10,log2,modf,nan,
pow,sqrt,radians,tanh,pi
"""
"""
#   1 inci yol
import math
ebru=math.factorial(5)
print(ebru)  #120
print(math.ceil(5.1))  #6
print(math.floor(5.2))  #5
print(math.sqrt(25))  # 5.0
print(math.pow(10,2))  #  100.0
print(math.fmod(15,11))  #  4 , (sey gibi 15 % 11 gives 4 yani)
print(math.pi*3)  #  3.141592653589793
print(math.pi*3)  #  9.42477796076938

# biz bazen başa math yerine ebru da yazmak isteriz bunu nasıl yaparız
import math as ebru
print(ebru.factorial(5))  # 120  mesela bunun gibi
"""

# 2inci yol ,hepsini dahil etme ve başa math yazmadan
"""
from math import*
def sqrt(a):
    print("fuck.")
    return a**0.5
print(sqrt(25))  # fuck. (\n hayal et alt satırdasın) 5.0 ( gösterirdi)
# function i yaptı cünkü en son onu görüyor ya functionin altına yazsaydık 
# o zamanda math kütüphanesindekini yapardı
"""
"""
def sqrt(a):
    print("fuck.")  
    return a**0.5 

from math import*
print(sqrt(25))  # 5.0
"""
"""
# illa hepsinimi almak zorunda degiliz math kütüphanesinden istenilenleride alabilirsin mesela floor ve ceil i al 
from math import floor,ceil
a=ceil(6.8) 
print(a)          # 7
print(ceil(5.1))  # 6
print(floor(5.2)) # 5
"""



#   video 59


import random     # random sayı veren functionı bu modul ile kullanırız
import time       # time gibi gerekli functionlarıda bundan kullanırız
rastgele_sayı=random.randint(1,40) # 1 ile 40 arasında
tahmin_hakkı=7
print("rastgele_sayı=",rastgele_sayı)
while True:
    num=int(input("num:"))
    if num==rastgele_sayı:
        print("bilgiler sorgulanıyor.")
        time.sleep(1) # 1 sn  uyuyor system demek
        print("dogru sayı",rastgele_sayı)
        break
    elif num>rastgele_sayı:
        print("bilgiler sorgulanıyor.")
        time.sleep(1) # 1 sn  uyuyor system demek
        print("num is up of rastgele_sayı")
        tahmin_hakkı-=1
    elif num<rastgele_sayı:
        print("bilgiler sorgulanıyor.")
        time.sleep(1) # 1 sn  uyuyor system demek
        print("num is down of rastgele_sayı")
        tahmin_hakkı-=1
    if tahmin_hakkı==0:
        print("predict counter is seven so fuck off")
        print("rastgele_sayı=",rastgele_sayı)
        break

"""
output bize bunu verir
rastgele_sayı= 19
num:20
bilgiler sorgulanıyor.
num is up of rastgele_sayı
num:10
bilgiler sorgulanıyor.
num is down of rastgele_sayı
num:15
bilgiler sorgulanıyor.
num is down of rastgele_sayı
num:18
bilgiler sorgulanıyor.
num is down of rastgele_sayı
num:19
bilgiler sorgulanıyor.
dogru sayı 19
"""





a="ebrueeeesadasdwqe"
c=set(a)  
print(type(c),c) #<class 'set'> {'w', 's', 'q', 'u', 'a', 'b', 'e', 'd', 'r'}

c=sorted(c)  
print(type(c),c)# <class 'list'> ['a', 'b', 'd', 'e', 'q', 'r', 's', 'u','w']

c=''.join(c)
print(type(c),c) # <class 'str'> abdeqrsuw







"""
# random
import random
print(random.randrange(1, 10))
"""
"""
# check string
txt = "The best things in life are free!"
print("free" in txt) # True

# if kullanılacakda yapılabilir
txt = "The best things in life are free!"
if "free" in txt:
print("Yes, 'free' is present.")  # Yes, 'free' is present.

# not in  kullanıncada var mı yokmu print de görürüz
txt = "The best things in life are free!"
print("expensive" not in txt) # True

# if  içinde not kullanarak check
txt = "The best things in life are free!"
if "expensive" not in txt:
  print("No, 'expensive' is NOT present.") # No, 'expensive' is NOT present.

"""







# split a string
"""
a="   ebRu .!? biTch   "
print(a) # ['ebRu', '.!?', 'biTch'] 
# eger hiç bir şey yazmaszan yani a.split() bize şunu  verir boşluk algılıyor ' ' gibi
b=a.split()  
print(b,'\n',b[0])  # ebRu
print(type(a),type(b)) # <class 'str'> <class 'list'>

# deneme 
a="   ebRu .!? biTch   "
print(a) # ['   ebRu ', '!? biTch   '] 
b=a.split('.')  # . taya kadar  bir kısım , noktadan sonrası için 1 kısım
print(b,'\n',b[0])  # ['   ebRu ', '!? biTch   ']  \n  ebRu 
"""

# replace a string
"""
a="fuck ebru fuck ceylan you omur"
b=a.replace("fuck","sikim") 
print(b) # sikim ebru sikim ceylan you omur
b=a.replace("u","z") 
print(b) # fzck ebrz fzck ceylan yoz omzr
"""

"""
# lower upper a string
a="Ebru cEylAn"
b=a.lower()
print(b) # ebru ceylan
b=a.upper()
print(b) # EBRU CEYLAN
"""

"""
# Remove spaces at the beginning and at the end of the string:
a="  ebru ceylan   "
print(a)    #ebru ceylan___
b=a.strip()  # şimdi yukarıdaki ceylan sonunda boşluklar var onları ___ olarak say ama altta yok 
print(b)    #ebru ceylan
"""

"""
# format usage
quantity = 3
itemno = 567
price = 49.95
myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
print(myorder.format(quantity, itemno, price))
"""

"""
# find character in a string 
txt = "Hello, welcome to my world."
x = txt.find("e")
print(x) # 1
x = txt.find("e",x+1)
print(x) # 8
"""

"""
# uppercase->lowercase  , lowercase->uppercase
txt = "Hello My Name Is PETER"
x = txt.swapcase()
print(x) # hELLO mY nAME iS peter
"""

"""
# title ,ilk harfi caps lar  yada capitalize() ,aynı bok
txt = "welcome to my 2nd world"
x = txt.title()
print(x)  # Welcome To My 2Nd World

# buda benim yaptıgım yol
a="ebru ceyaln"
b=a[0].upper()+a[1::1]
print(b)
"""

"""
#  syntax : string.count(value, start, end)
# mesela x = txt.count("apple", 10, 24)
# count  ,apples yazmasına ragmen o apples daki apple i görüyor bu nedenle 2
txt = "I love apples, apple are my favorite fruit"
x = txt.count("apple")
print(x) # 2
"""




class lar


class first:
    def __init__(self,name1,age1):
        self.name=name1
        self.age=age1
    def bilgi(self):
        print(self.name,self.age)

class second(first):
    def __init__(self,name2,age2,gender2='female'):
        super().__init__(name2,age2)
        self.gender=gender2
    def bilgi():  # first class daki bilgi yi over ride yaptık
        print(self.name,self.age,self.gender)
    def __str__(self):  # printlemenin bir başka yolu 
        return "{}\n{}\n{}".format(self.name,self.age,self.gender)
        
    def __len__(self):
        return self.age
girl1=second('ebru',33)
#girl1.bilgi()
print(girl1)
print(len(girl1))
a="elma"
print(len(a))








#televizyon kumandası program kendi yaptı hoca
import random
import time
class Kumanda():

    def __init__(self, tvdurum='kapalı', ses=0, kanallistesi=["trt"], kanal="trt"):
        self.tvdurum = tvdurum
        self.ses = ses
        self.kanallistesi = kanallistesi
        self.kanal = kanal

    def tvac(self):
        if self.tvdurum == "kapalı":
            print("tv acılıyor")
            self.tvdurum = "acık"
        elif self.tvdurum == "acık":
            print("tv is already opened")

    def tvkapat(self):
        if self.tvdurum == "acık":
            print("tv kapanıyor")
            self.tvdurum = "kapalı"
        elif self.tvdurum == "kapalı":
            print("tv is already closed")

    def sesdurumu(self):
        while True:
            if self.tvdurum=="acık" :
                cevap = input("sesi azalt : '<' \nsesi arttır : > \ncıkıs: cıkıs ")
                if cevap == '<':
                    if self.ses != 0:
                        self.ses -= 1
                        print("ses:", self.ses)

                elif cevap == '>':
                    if self.ses != 32:
                        self.ses += 1
                        print("ses:", self.ses)
                elif cevap == 'cıkıs':
                    print("ses güncellendi", self.ses)
                    break
            else:
                print("tv kapalı")
                break
    def kanalekle(self, kanallar):

        print("kanal ekleniyor.")
        time.sleep(1)
        self.kanallistesi.append(kanallar)
        print("kanal eklendi.")



    def rasgelekanal(self):
        if self.tvdurum=="acık":
            rasgele = random.randint(0, len(self.kanallistesi) - 1)
            self.kanal = self.kanallistesi[rasgele]
            print("şu anki kanal:", self.kanal)
        else:
            print("tv is kapalı")

    def __len__(self):

        return len(self.kanallistesi)

    def __str__(self):

        return "tv durumu:{}\ntv ses:{}\nkanal listesi:{}\nşu an ki kanal:{}".format(self.tvdurum, self.ses, self.kanallistesi, self.kanal)



print(
    """
    1-tv ac
    2-tv kapat
    3-tv ses ayarları
    4-tv kanal ekle
    5-tv kanal sayısı ögrenme
    6-rastgele kanala geçme
    7-televizyon bilgileri
    cıkmak için 'q' ya basın
    """
)
kumanda = Kumanda()
while True:

    islem = input("islem seciniz: ")
    if islem == 'q':
        print("program sonlandırılıyor")
        break
    elif islem == '1':
        kumanda.tvac()
    elif islem == '2':
        kumanda.tvkapat()
    elif islem == '3':
        kumanda.sesdurumu()
    elif islem == '4':
        if kumanda.tvdurum=="acık":
            kanalisimleri = input("eklenecek kanallar virgül ile ayırarak girin: ")
            kanallist = kanalisimleri.split(',')
            for i in kanallist:
                kumanda.kanalekle(i)
        else:
            print("tv kapalı")
    elif islem == '5':
        if kumanda.tvdurum == "acık":
            print("kanal sayısı: ", len(kumanda))
        else:
            print("tv kapalı")
    elif islem == '6':
        if kumanda.tvdurum == "acık":
            kumanda.rasgelekanal()
        else:
            print("tv kapalı")
    elif islem == '7':
        if kumanda.tvdurum == "acık":
            print(kumanda)
        else:
            print("tv kapalı")
    else:
        print("gecersiz islem")








#bilgisayar ekleme görüntüleme library gibi ödevdi
import random
import time

class Computer():
    def __init__(self,model=['ideapad'],lifetime=[10],cost=[2000],brand=["lenovo"],adet=1):
        self.model=model
        self.lifetime=lifetime
        self.cost=cost
        self.brand=brand
        self.adet=adet
    def __str__(self): # bilgiler1
        return "models:{}\nlifetimes:{}\ncosts:{}\nbrands:{}\nadet:{}".format(self.model,self.lifetime,self.cost,self.brand,self.adet)
    def bilgiler(self,num): # bilgiler2
        num-=1
        print("models:{}\nlifetimes:{}\ncosts:{}\nbrands:{}".format(self.model[num],self.lifetime[num],self.cost[num],self.brand[num]))
    def __len__(self): # costs totally
        return sum(self.cost)
    def ekle(self,newpc):
        print("computer is being added")
        self.adet+=1
        time.sleep(1)
        self.model.append(newpc[0])
        self.lifetime.append((newpc[1]))
        self.cost.append(int(newpc[2]))
        self.brand.append(newpc[3])
        print("computer is added to library")
    def rasgele(self):
        rast=random.rantint(0,adet-1)
        print("model:{}\nlifetime:{}\ncost:{}\nbrand:{}\nadet:{}")


computer = Computer()
print(
    """
    islemler:
    1-computer ekle
    2-bigiler1
    3-bilgiler2
    4-total cost
    cıkıs için 'q' ya basın
    
    """
)
while True:
    islemler=input("islem: ")
    if islemler=='1':
        print("virgul ile ayır ")
        arr=input("sıralama\nmodel,lifetime,cost,brand\n")
        arr=arr.split(',')
        computer.ekle(arr)
    elif islemler=='2':
        print(computer)
    elif islemler=='3':
        a=int(input("hangi computer: "))
        computer.bilgiler(a)
    elif islemler=='4':
        print(len(computer))
    elif islemler=='q':
        break;
    else:
        print("gecersiz islem.")









# class deneme 

class Hayvanlar():
    def __init__(self,tür='',lifetime=[],besin='',isim='',habitat=''):
        self.tür=tür
        self.lifetime=lifetime
        self.besin=besin
        self.isim=isim
        self.habitat=habitat

    def __str__(self):
        return "tür:{}\nlifetime:{}\nbesin:{}\nisim:{}\nhabitat:{}\n".format(self.tür,self.lifetime,self.besin,self.isim,self.habitat)

class Köpek(Hayvanlar):
    def __init__(self,tür='',lifetime=[],besin='',name='',habitat='',owner=''):
        self.isimm = name
        self.owner=owner
        super().__init__(tür,lifetime,besin,'',habitat)
        #self.isim = name  #aynı isimde olunca direk hayvan class ının isim ine gider
    def bilgiler(self):
        print("name:{}\nowner:{}\n".format(self.isimm,self.owner)) # isim yaparsan '' görürsün
while True:
    print("""
    islemler 
    cıkmak için 'q' bas
    1=bigiler
    2=ekle
    3=köpek özel bilgiler
    """)
    a=input("islem: ")
    if a=='q':
        break
    elif a=='2':
        a=input("virgül iler ayır\ntür,lifetime,besin,isim,habitat,owner\n")
        a=a.split(',')
        köpek=Köpek(a[0],a[1],a[2],a[3],a[4],a[5])
    elif a=='1':
        print(köpek)
    elif a=='3':
        köpek.bilgiler()










# hayvanlar class ödevdi
class Hayvanlar():
    def __init__(self,tür='',lifetime=[],besin=''):
        self.tür=tür
        self.lifetime=lifetime
        self.besin=besin

    def __str__(self):
        return "tür:{}\nlifetime:{}\nbesin:{}\n".format(self.tür,self.lifetime,self.besin)

class Köpek(Hayvanlar):
    def __init__(self,tür='',lifetime=[],besin='',owner=''):
        self.owner=owner
        super().__init__(tür,lifetime,besin)
    def __str__(self):
        return "tür:{}\nlifetime:{}\nbesin:{}\nowner:{}\n".format(self.tür, self.lifetime, self.besin,self.owner)
class Kus(Hayvanlar):
    def __init__(self,tür='',lifetime=[],besin='',hover=[]):
        self.hover=hover
        super().__init__(tür,lifetime,besin)
    def __str__(self):
        return "tür:{}\nlifetime:{}\nbesin:{}\nhover:{}\n".format(self.tür, self.lifetime, self.besin,self.hover)
class At(Hayvanlar):
    def __init__(self,tür='',lifetime=[],besin='',run=[]):
        self.run=run
        super().__init__(tür,lifetime,besin)
    def __str__(self):
        return "tür:{}\nlifetime:{}\nbesin:{}\nrun:{}\n".format(self.tür, self.lifetime, self.besin,self.run)

while True:
    print("""
    islemler 
    cıkmak için 'q' bas
    1= [2-3-4].bigiler
    2=ekle köpek
    3-ekle kuş
    4-ekle at
    """)
    a=input("islem: ")
    if a=='q':
        break
    elif a=='4':
        a = input("virgül iler ayır\ntür,lifetime,besin,run\n")
        a = a.split(',')
        at = At(a[0], a[1], a[2], a[3])
    elif a=='3':
        a = input("virgül iler ayır\ntür,lifetime,besin,hover\n")
        a = a.split(',')
        kus = Kus(a[0], a[1], a[2], a[3])
    elif a=='2':
        a=input("virgül iler ayır\ntür,lifetime,besin,owner\n")
        a=a.split(',')
        köpek=Köpek(a[0],a[1],a[2],a[3])
    elif a=='1':
        b=input("num: " )
        if b=='2':
            print(köpek)
        elif b=='3':
            print(kus)
        elif b=='4':
            print(at)
    else:
        print("gecersiz islem.")









Output:
value error hatası
program son erdi

try:
    a=int("asdas213")
    print("program burada")
except:
    print("value error hatası");
print("program son erdi")









Output:
program burada
program son erdi

try:
    a=int("23")
    print("program burada")
except:
    print("value error hatası");
print("program son erdi")







                
Output:                
value1: asd12
value error hatası
program son erdi  
                        
try:
    a=int(input("value1: "))
    b=int(input("value2: "))
    print(a/b)
except ValueError:  #specific bir hata için bakıyorsan böyle yazabilirsin
    print("value error hatası");
print("program son erdi")
       



 





Output:                
value1: 5
value2: 0
value cannot be divided to zero
program son erdi

try:
    a=int(input("value1: "))
    b=int(input("value2: "))
    print(a/b)
except ValueError:  #specific bir hata için bakıyorsan böyle yazabilirsin
    print("value error hatası");
except ZeroDivisionError:
    print("value cannot be divided to zero")
print("program son erdi")








Output:                
value1: 5
value2: 0
value error hatas or zero division errorı
program son erdi

try:
    a=int(input("value1: "))
    b=int(input("value2: "))
    print(a/b)
except (ValueError,ZeroDivisionError):  #specific bir hata için bakıyorsan böyle yazabilirsin
    print("value error hatas or zero division error");

print("program son erdi")










 bu finally inin olayı hata cıksada cıkmasada calışıyor olması belki kullanılır
Output:                
value1: 5
value2: 0
value error hatas or zero division error
program burda
program son erdi

value1: 5
value2: 2
2.5
program burda
program son erdi
try:
    a=int(input("value1: "))
    b=int(input("value2: "))
    print(a/b)
except (ValueError,ZeroDivisionError):  #specific bir hata için bakıyorsan böyle yazabilirsin
    print("value error hatas or zero division error");
finally:
    print("program burda")
print("program son erdi")









raise nin anlamı burda kendi istedigmiz hatayı gösteriyoruz varsa valueerror da kod ismi hatanın
Output:
kelime: 12
Traceback (most recent call last):
  File "<string>", line 11, in <module>
  File "<string>", line 7, in b
ValueError: Lutfen bir kelime girin
def b(a):
    if type(a)!=str:
        raise ValueError("Lutfen bir kelime girin")
    else:
        return a[::-1]
print(b(input("kelime: ")))













Output:
urbe
tumra
program burda
program biter.


def bb(a):
    if (type(a)!=str):
        raise ValueError("Lutfen bir kelime girin")
    else:
        return a[::-1]
print(bb("ebru"))
try:
    print(bb("armut"))
    print("program burda")
except:
    print("hata var")
print("program biter.")









Output:
41
hata var
program biter.

def bb(a):
    if (type(a)!=str):
        raise ValueError("Lutfen bir kelime girin")
    else:
        return a[::-1]
print(bb("14"))
try:
    print(bb(12))
    print("program burda")
except:
    print("hata var")
print("program biter.")













output:
345
hata var
hata var
14
hata var
program sona erdi.

ödev 1  
liste=["345","sadas","324a","14","kemal"]
for i in liste:
    try:
        i=int(i)
        print(i)
    except ValueError:
        print("hata var")
print("program sona erdi.")  








output:
2
4

ödev 2
def oddeven(num):
    if num%2==0:
        return num 
    else:
        raise ValueError
liste=[1,2,3,4,5]
for i in liste:
    try:
        print(oddeven(i))
    except:
        pass













eger türkce character de kullanmak istiyorsan 
söyle bir şey yapabilirsin
file=open("deneme.txt","w",encoding="utf-8") bu türkce karakterlere izin veriyor english karakterler ile beraber
bir şeyler yazdık 

"""
file=open("deneme.txt","w")
file.write("ebru fuck you\n")
file.write("ceylan seni sikerim")
file.close()
"""
bir şeyler aldık
output
ebru fuck you
ceylan seni sikerim

file=open("deneme.txt","r")
print(file.read())
file.close()




file=open("deneme.txt","a")
file.write("omur fuck you\n")  # yazmaz isen  \n yapmaz yanında yazar
file.close()










"""
file=open("deneme.txt","r",encoding="utf-8") # türkce karakter felan için lazım
for i in file: # dosya içinde 1 adet \n var ,print de burda kendi \n koyuyor ondan 2 tane line atlıyor
    print(i,end='') # bu print in \n yapmasını istemiyorsan end='' yap
"""

"""
file=open("deneme.txt","r")
print(file.read())
print("---------")  # file 1 incide sonuna gidiyor   hala sonunda , birdaha read yaparsan  sonunda ya bir şey 
print(file.read())  # göstermez
"""
"""
file=open("deneme.txt","r")
a=file.readline()  # line by line okur
print(a)
"""
"""
file=open("deneme.txt","r")
# line by line okumak
print(file.readline())
print(file.readline())
print(file.readline())
print(file.readline())
print(file.readline())
print("------------")  # burdan aşagısı boş hiç bir şey göstermez
print(file.readline())
print(file.readline())
"""
"""
# tüm dosyayı bir list haline cevirir \n leri bile ekler mesela ["ebru\n","ceylan\n"] gibi
file=open("deneme.txt","r")
arr=file.readlines()
print(arr)
print(arr[0])
"""





"""
file.close() yapmak istemiyorsan sürekli
with open("deneme.txt",'w') as file:  bunuda kullanabilirsin
"""

"""
# var olanı degiştiricez içerik de
with open('deneme.txt','r+') as file:
    file.seek(25) # ebru fuck you -> ebru fuck ilkay
    file.write('mee\n') # 3 den fazla karacter degiştirince sonraki line lardan devam ediyor 
    # üzerine yazıyor yani
"""
"""
# .seek() ve .tell() var ,seek bize dosyada hangi byte a gitmek istedigimizde işe yarar, tell ise hangi byte da
# oldugumu söyler
file=open('deneme.txt','r+')
file.seek(3)  # dosya içinde ileri geri gitmemizi saglar
print(file.tell())  # 3 verir
"""
"""
# başa ekleme yapalım dosya nın başına
file=open('deneme.txt','r+')
icerik=file.read()
icerik='hello bitches\n'+icerik
file.seek(0)  # bunun ile dosyanın sonundan başına aldık  başa geri döndük yani
file.write(icerik)  
"""


"""
# ortaya ekleme yapalım
with open('deneme.txt','r+') as file:
    icerik=file.readlines()
    print(icerik)
    icerik.insert(3,"jennnifer lopez\n")
    file.seek(0)
    for i in icerik:
        file.write(i)
"""
"""
# sona ekleme
with open('deneme.txt','a') as file:
    file.write("brandi love\n")
"""












# hocanın yaptıgı örnek file da
def hesap(stu):
    stu=stu[:-1]
    stu=stu.split(",")
    isim = stu[0]
    not1 = int(stu[1])
    not2 = int(stu[2])
    not3 = int(stu[3])
    nott = not1*(0.3) + not2*(0.3) + not3*(0.4)
    if nott>=90:
        harf='AA'
    elif nott<90 and nott>=75:
        harf='BB'
    elif nott<75 and nott>=65:
        harf='CC'
    elif nott<65 and nott>=50:
        harf='DD'
    elif nott<50 and nott>=45:
        harf='FD'
    else:
        harf='FF'
    return isim+"------->"+harf+'\n'

with open('students.txt','r+',encoding='utf-8') as file:
    adjusted=[]
    for i in file:
      adjusted.append(hesap(i))
with open('notlar.txt','r+',encoding='utf-8') as file1:
    for i in adjusted:
        file1.write(i)








hocanın file dosyasını geliştirdim

def hesap(stu):
    stu=stu[:-1]
    stu=stu.split(",")
    isim = stu[0]
    not1 = int(stu[1])
    not2 = int(stu[2])
    not3 = int(stu[3])
    nott = not1*(0.3) + not2*(0.3) + not3*(0.4)
    if nott>=90:
        harf='AA'
    elif nott<90 and nott>=75:
        harf='BB'
    elif nott<75 and nott>=65:
        harf='CC'
    elif nott<65 and nott>=50:
        harf='DD'
    elif nott<50 and nott>=45:
        harf='FD'
    else:
        harf='FF'
    return isim+"------->"+harf+'\n'

with open('students.txt','r+',encoding='utf-8') as file:
    adjusted=[]
    for i in file:
      adjusted.append(hesap(i))
with open('notlar.txt','r+',encoding='utf-8') as file1:
    for i in adjusted:
        file1.write(i)

with open('notlar.txt','r+',encoding='utf-8') as file2:
    kalanlar=[]
    gecenler=[]
    for i in file2:
        #print(i,end='') # \n i siler print deki 2 \n den kurtulmus olduk
        if 'FF' in i:
            kalanlar.append(i)
        else:
            gecenler.append(i)

with open('gecenler.txt', 'w', encoding='utf-8') as file:
    for i in gecenler:
        file.write(i)
with open('kalanlar.txt', 'w', encoding='utf-8') as file:
    for i in kalanlar:
        file.write(i)






















#'hocanın yöntem'
with open("futbolcular.txt", "r", encoding="utf-8") as file:
    gs = list()
    bjk = list()
    fb = list()
    for satır in file:
        satır = satır[:-1]
        satır_elemanları = satır.split(",")
        if (satır_elemanları[1] == "Fenerbahçe"):
            fb.append(satır + "\n")
        elif (satır_elemanları[1] == "Galatasaray"):
            gs.append(satır + "\n")
        else:
            bjk.append(satır + "\n")
    with open("gs.txt", "w", encoding="utf-8") as file1:
        for i in gs:
            file1.write(i)
    with open("fb.txt", "w", encoding="utf-8") as file2:
        for i in fb:
            file2.write(i)
    with open("bjk.txt", "w", encoding="utf-8") as file3:
        for i in bjk:
            file3.write(i)










# benim yöntem
with open("futbolcular.txt",'w',encoding='utf-8') as file:
    arr = ["ebru,gs\n", "sinem,bjk\n", "oznur,fb\n", "cemre,bjk\n", "ceylan,gs\n", "omur,fb\n"]
    file.writelines(arr)
filegs = open('gs.txt', 'w')
filebjk = open('bjk.txt', 'w')
filefb = open('fb.txt', 'w')
def func(stu):
    global fb,gs,bjk
    stu=stu[:-1]
    stu=stu.split(',')
    if stu[1]=='gs':
        filegs.write(stu[0]+'\n')
    elif stu[1]=='bjk':
        filebjk.write(stu[0] + '\n')
    elif stu[1]=='fb':
        filefb.write(stu[0] + '\n')
with open("futbolcular.txt",'r+',encoding='utf-8') as file:
    for i in file:
        func(i)
filegs.close()
filebjk.close()
filefb.close()
















# map function i
def double(a):
    return a**2
b=[1,2,3,4,5]
a=map( double, b )
print(list(a),a) 
# list'e cevirmez isen bunu verir [1, 4, 9, 16, 25] <map object at 0x0000023F670DAFD0>



# lambda ile denedim yukarıdaki ile aynı kod ,karesini alıyor
b=[1,2,3,4,5]
a=map( lambda a: a**2, b )
print(list(a),a)
# list'e cevirmez isen bunu verir [1, 4, 9, 16, 25] <map object at 0x0000023F670DAFD0>











 # map deneme
b=[1,2,3,4]
b1=[5,6,7,8]
b2=[9,10,11,12,13,14]
a=map( lambda a,b: a*b, b,b1 )
print(list(a)) # [5, 12, 21, 32]




# map deneme
b=[1,2,3,4]
b1=[5,6,7,8]
b2=[9,10,11,12,13,14]
a=map( lambda a,b: a*b, b,b2 )
print(list(a)) # [9, 20, 33, 48]



# map deneme ,burda 13 ve 14 ü görmezden gelir cünkü b,b1 de eşitligi yok
b=[1,2,3,4]
b1=[5,6,7,8]
b2=[9,10,11,12,13,14]
a=map( lambda a,b,c: a*b*c, b,b1,b2 )
print(list(a)) # [45, 120, 231, 384]











# reduce function i 

def topla(a,b):
    return a+b
from functools import reduce
# veya direk import functools dersin istedigini kullanırsın başına functools yazarak
# yada import functools*  komple alırsın

b=[1,2,3,4]
b1=[5,6,7,8]
b2=[9,10,11,12,13,14]

a=reduce(topla,b)
print(a)  # 10   söyle yapıyor 1+2 = 3 then 3+3=6 then 6+4=10 böyle list in sonuna kadar gider

a=reduce(topla,b1)
print(a)  # 26

a=reduce(lambda a,b:a+b ,b )
print(a)  # 10





 #reduce example
import functools
b=[1,2,3,4]
b1=[5,6,7,8]
b2=[9,10,11,12,13,14]
def maxmin(x,y):
    if x>y:
        return x
    else:
        return y
a=functools.reduce(maxmin,b)
print(a)  # 4  







# filter function i

def asal(x):
    if x<2:
        return False
    else:
        i=2
        while i<x:
            if x%i==0:
                return False
            i+=1
        return True

b=[1,2,3,4]
b1=[5,6,7,8]
b2=[9,10,11,12,13,14]

# filter de function yazacagın yer ya true yada false dönmelidir yoksa hata alırsın
a=filter( lambda x:x%2==0 , b)
print(list(a))  # [2, 4]

a=filter( asal ,b1)
print(list(a))  # [5, 7]

a=filter(asal,range(2,50))  # range de 2 den başlar 49 a kadar bakar 50 i gitmez
print(list(a)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]















#  zip function

def birles(a,b):
    sonuc=list()
    i=0
    while(i <len(a) and i< len(b)):
        sonuc.append((a[i],b[i])) # () eklemezsen hata verir ( (a[i],b[i]) ) ,double dimension yaptık
        i+=1
    return sonuc
b=[1,2,3,4]
b1=[5,6,7,8]
b2=[9,10,11,12,13,14]
b3=["c++","python","java"]
b4=["c++","python","java","javascrpit"]
a=birles(b,b1)
print(list(a)) # [(1, 5), (2, 6), (3, 7), (4, 8)]
# eger bize zip olsaydı  aynı işi 1 satırda yapardık ki var yaptık

a=zip(b,b1)
print(list(a)) # [(1, 5), (2, 6), (3, 7), (4, 8)]

a=zip(b,b3) #array uzunlugu baz alınır eşitligi olucak java dan sonra 1 tane daha eklesek (4,'') olurdu
print(list(a)) # [(1, 'c++'), (2, 'python'), (3, 'java')]

a=zip(b,b4)
print(list(a)) # [(1, 'c++'), (2, 'python'), (3, 'java'), (4, 'javascrpit')]

for i,j in zip(b2,b3):
    print(i,j)
"""
9 c++
10 python
11 java
"""

sozluk={"ebru":1,"özlem":2.5,"ceylan":"favori"}
sozluk1={"sinem":3,"deniz":5,"ömür":"favori2"}

a=zip(sozluk,sozluk1)
print(list (a)) # [('ebru', 'sinem'), ('özlem', 'deniz'), ('ceylan', 'ömür')]

a=zip(sozluk.items(),sozluk1.items())
print(list (a)) # [(('ebru', 1), ('sinem', 3)), (('özlem', 2.5), ('deniz', 5)), (('ceylan', 'favori'), ('ömür', 'favori2'))]

a=zip(sozluk.keys(),sozluk1.keys() )
print(list (a)) # [('ebru', 'sinem'), ('özlem', 'deniz'), ('ceylan', 'ömür')]

a=zip(sozluk.values(),sozluk1.values() )
print(list (a)) # [(1, 3), (2.5, 5), ('favori', 'favori2')]



















b=[1,2,3,4]
b1=[5,6,7,8]
b2=[9,10,11,12,13,14]
b3=["c++","python","java"]
b4=["c++","python","java","javascrpit"]
sozluk={"ebru":1,"özlem":2.5,"ceylan":"favori"}
sozluk1={"sinem":3,"deniz":5,"ömür":"favori2"}


# enumerate function
"""
eger bize enumerate() olmasaydı function lar ile yapıcaktık ne ise yarar dersen bu:
bize listlerdeki icerik lerin yerlerini veriyor mesela a= ["elma","armut"] 
enumerate(a) bize   [(0, 'elma'), (1, 'armut')] bunu verir
b= ["elma","armut"]
a=enumerate(b)
print(list(a))  # [(0, 'elma'), (1, 'armut')]
"""

# function ile
def enum(x):
    sonuc=[]
    i=0
    while(i<len(x)):
        sonuc.append( (i,x[i]) )
        i+=1
    return sonuc

a=enum(b)
print(a)  # [(0, 1), (1, 2), (2, 3), (3, 4)]

a=enum(b3)
print(a)  # [(0, 'c++'), (1, 'python'), (2, 'java')]
print( a[0][0],a[0][1] ) # 0 c++

for i,j  in enumerate(b4):
    print(i,j)
"""
0 c++
1 python
2 java
3 javascrpit
"""


for i,j in enumerate(b4):
    if i%2==0:
        print(i,j)
"""
0 c++
2 java
"""









all  any functions



b=[1,2,3,4]
b1=[5,6,7,8]
b2=[9,10,11,12,13,14]
b3=["c++","python","java"]
b4=["c++","python","java","javascrpit"]
sozluk={"ebru":1,"özlem":2.5,"ceylan":"favori"}
sozluk1={"sinem":3,"deniz":5,"ömür":"favori2"}
arr=[True,False,True,False,True]
arr1=[0,0,0,0,0]
"""
all() in olayı: bir listede  bir tane bile false varsa digerlerinin önemi yoktur 
false yazar cevap hepsi true ise true döndürür
any() in olayı da all in tam tersi 1 tane bile true varsa true döndürür ,hepsi false ise
false döndürür.

"""

# all ,any olmasaydı function ile bunu yapardık
def hepsi(x):
    for i in x:
        if  not i:
            return False
    return True

print(hepsi(b))  # True
print(hepsi(b1)) # True
print(hepsi(arr1)) # False
print(hepsi(b3)) # True
print(hepsi(arr)) # False
a=all(arr)
print(a) # False
a=any(arr)
print(a) # True
a=any(arr1)
print(a) # False










ödevler 




""" # problem 1
arr= [(3,4),(10,3),(5,6),(1,9)]
a=map( lambda x:x[0]*x[1],arr)
print(list(a)) # [12, 30, 30, 9]
"""
"""
# problem 2
def func(x):
    if (x[0]**2 + x[1]**2)  == x[2]**2:
        return True
    return False

arr=[(3,4,5),(6,8,10),(3,10,7)]
a=filter( func,arr )
print(list(a)) # [(3, 4, 5), (6, 8, 10)]
"""
"""
# problem 3
from functools import reduce
arr=[1,2,3,4,5,6,7,8,9,10]
a=reduce(lambda x,y:x+y ,(filter(lambda x:x%2==0 ,arr) ))
print((a)) # 30
"""
"""
# problem 4
names=["Kerim","Tarık","Ezgi","Kemal","İlkay","Şükran","Merve"]
surnames=["Yılmaz","Öztürk","Dağdeviren","Atatürk","Dikmen","Kaya","Polat"]
for i,j in zip(names,surnames):
    print(i,j)
# Kerim Yılmaz
# Tarık Öztürk
# Ezgi Dağdeviren
# Kemal Atatürk
# İlkay Dikmen
# Şükran Kaya
# Merve Polat
"""

















"""
decimal ->binary  bin()
dec-> hexadecimal  hex()
"""
print( bin(5) )  # 0b101
print( hex(50) )  # 0x32


"""
abs()

round()

sum()  # bunda ille list ,tuple felan iteration olan
bir şeyde yapmalısın cünkü sum() functioni  içinde
for loop ları yapıyor arka planda

min() min degeri verir listedeki 

max() max degeri verir listedeki

pow()  bu a ** b aslında hani 2**3=8 aslında 2^3 yani
"""
print(abs(-21312) ) # 21312
print(abs(12) )  # 12

print( round(5.6) )  # 6
print( round(5.3) )  # 5
print( round(5.5) )  # 6
print( round(5.56345,2) )  #  5.56  # burdaki ,2 nin olayı c++ dai %.2f gibi düşün


print( sum( [1,2,3,4,5] ) ) # 15
print( sum( (1,2,3,4,5) ) ) # 15
# print( sum( 1,2,3,4,5 ) ) # hata verdi illa iterable birşey olmalıdır

print( max( [1,2,3,4,5] ) )  # 5
print( min( [1,2,3,4,5] ) )  # 1

print( pow( 2,3 ) )  # 8  thus 2^3 














a="PyThOn"
print( a.lower() ) # python
print( a.upper() ) # PYTHON

a1="her sey guzel olacak"
a2="ceylan omur ebru love"
print( a1.replace("e","ff")) # hffr sffy guzffl olacak
print( a2.replace("ceylan","ezgi") ) # ezgi omur ebru love

# istenen kelime,harf baslarsa yada biterse true başlamaz ise false verir
a1="her sey guzel olacak"
print( a1.startswith("h") ) # True
print( a1.startswith("her") ) # True
print( a1.startswith("al") ) # False
print( a1.endswith("k") ) # True
print( a1.endswith("cak") ) # True
print( a1.endswith("olacak") ) # True

a1="her sey guzel olecak"
print( a1.split(" ") )  # ['her', 'sey', 'guzel', 'olacak']
print( a1.split("e") ) # ['h', 'r s', 'y guz', 'l ol', 'cak']
print( a1.split("gu") ) # ['her sey ', 'zel olecak']


a="       python         " # başta ve sondaki boşlukları siler matlabtaki strtrim() gibi
print( a.strip() ) # strip() içine bir şey yazmaz isen boşluk kabul eder
# python verdi
print( a.rstrip() ) # "       python"  boşluk var sondaki boşlukları sildi
print( a.lstrip() ) # "python         " baştaki boşlukları sildi

a="---------python------"
print( a.strip("-") ) # python
print( a.rstrip("-") ) # ---------python
print( a.lstrip("-") ) # python------


a1="ebru ceylan omur ceylan ebru omur"
print(a1.find("r") ) # 2 # baştan baslar aramaya
print(a1.rfind("r") ) # 32  #sondan başlıyor arayama
print(a1.find("r",3) ) # 15 # 3 üncü indexden başladı aramaya



a1=["a","b","c","d"]
print( "".join(a1) ) # abcd
print( "-".join(a1) ) # a-b-c-d















a=set()
print( type(a)) # <class 'set'>

liste = [1,2,3,3,1,1,2,2,2]
a=set(liste)
print(a)  # {1, 2, 3}

print( set("Python Programlama Dili") )# {'r','D','m','o','n','h','a','y','l','i',' ','P','t','g'}

a={"python","php","python"}
print(a) # {'php', 'python'}
"""
  biz bu set() lere normal a[1] seklinde gibi ulaşamayız 
1 inci yol  list() e cevirmek 
2 inci yol for döngusunde almak
"""

a = {"Python","Php","Java","C","Javascript"}
for i in a:
    print(i)
"""
Java
C
Python
Php
Javascript
"""
# a[0] yaparsan hata alırsın
print(a,"\n", list( a),"\n",list(a)[0] )
"""
{'Java', 'Javascript', 'C', 'Python', 'Php'} 
['Java', 'Javascript', 'C', 'Python', 'Php']
 Python  # bu arada sıralama takılma  set de sıralama yoktur
"""


# add()
a={1,2,3}
a.add(5)
print(a) # {1, 2, 3, 5}
a.add(4)
print(a) # {1, 2, 3, 4, 5}


# difference
küme1 = {1,2,3,10,34,100,-2}
küme2 = {1,2,23,34,-1}
a=küme1.difference(küme2)  # küme1 de olup küme2 de olmayan herşey
print(a) # {10, 3, 100, -2}

a=küme2.difference(küme1)  # küme1 de olup küme2 de olmayan herşey
print(a) # {-1, 23}



# difference_uptade
küme1 = {1,2,3,10,34,100,-2}
küme2 = {1,2,23,34,-1}
küme1.difference_update(küme2)
print(küme1) # {3, 100, 10, -2}

küme1 = {1,2,3,10,34,100,-2}
küme2 = {1,2,23,34,-1}
küme2.difference_update(küme1)
print(küme2) # {23, -1}


#discard
a={1,2,3,4,5,6}
a.discard(3)
print(a)  # {1, 2, 4, 5, 6}


# intersection()
küme1 = {1,2,3,10,34,100,-2}
küme2 = {1,2,23,34,-1}
a=küme1.intersection(küme2)
print(a) # {1, 2, 34}
a=küme2.intersection(küme1)
print(a) # {1, 2, 34}


# intersection_update
küme1 = {1,2,3,10,34,100,-2}
küme2 = {1,2,23,34,-1}
küme1.intersection_update(küme2)
print(küme1) # {1, 2, 34}

küme1 = {1,2,3,10,34,100,-2}
küme2 = {1,2,23,34,-1}
küme2.intersection_update(küme1)
print(küme2) # {1, 2, 34}


# Kümeler ayrık küme mi ? : isdisjoint() metodu ,true or false dönerküme1 = {1,2,3,10,34,100,-2}
# Bu metod, eğer iki kümenin kesişim kümesi boş ise True, değilse False döner.
küme1 = {1,2,3,10,34,100,-2}
küme2 = {1,2,23,34,-1}
küme3 = {30,40,50}
print(küme1.isdisjoint(küme2)) # False
print(küme1.isdisjoint(küme3) ) # True


"""
Alt kümesi mi ? : issubset() metodu
Bu metod , birinci küme ikinci kümenin alt kümesiyse True, değilse False döner.
"""
küme1 = {1,2,3}
küme2 = {1,2,3,4}
küme3 = {5,6,7}
print( küme1.issubset(küme2) ) # True
print( küme1.issubset(küme3) ) # False


"""
Birleşim Kümesi : union() metodu
Bu metod, iki kümenin birleşim kümesini döner.
"""
küme1 = {1,2,3,10,34,100,-2}
küme2 = {1,2,23,34,-1}
print(küme1.union(küme2) ) # {1, 2, 3, 100, 34, 10, -1, 23, -2}




"""
Birleşim Kümesi ve update : update() metodu
Bu birinci kümeyle ikinci kümenin birleşim kümesini döner ve birinci kümeyi buna göre güncelle
"""
küme1 = {1,2,3,10,34,100,-2}
küme2 = {1,2,23,34,-1}
küme1.update(küme2)
print( küme1) # {1, 2, 3, 100, 34, 10, -1, 23, -2}









# append
arr=[1,2,3,4,5,6,7,8]
arr.append(4)
print( arr ) # [1, 2, 3, 4, 5, 6, 7, 8, 4]
arr.append("python")
print( arr ) # [1, 2, 3, 4, 5, 6, 7, 8, 4, 'python']

# extend()
arr=[1,2,3,4]
arr1=[10,20,30,40]
arr.extend(arr1)
print(arr) # [1, 2, 3, 4, 10, 20, 30, 40]

#insert()
arr=[1,2,3,4,5,6]
arr.insert(2,"pyton")
print(arr) # [1, 2, 'pyton', 3, 4, 5, 6]

#pop()

arr=["omur","ebru",2,3.56]
arr.pop()
print(arr) # ['omur', 'ebru', 2]


# remove()
arr=["omur","ebru",2,3.56]
arr.remove("ebru")
print(arr) # ['omur', 2, 3.56]


"""
ndex() metodu
index() metodu verilen bir değerin baştan başlayarak 
hangi indekste olduğunu söyler. Değer listede 
yoksa hata döner. Eğer ekstra index değeri belirtilirse, 
index metodu() değeri bu indeksten itibaren aramaya çalışır.
"""
arr= [1,2,3,4,3,3,5,6,7,8,9]
print( arr.index(3)) # 2   # bu aslında  find ya bildigin
print(arr.index(3,3)) # 4  # 3.indexden başlayarak arıyor


# count()   metodu verilen bir değerin listede kaç defa geçtiğini sayar.
arr = [1,2,3,4,5,6,1,1,1,1,1,1,1,1,8]
print( arr.count(1)) # 9
print( arr.count(10)) # 0



"""
sort() metodu
sort() metodu bir listenin elemanlarını sayıysa 
küçükten büyüğe , string ise alfabetik olarak sıralar. 
Eğer özellikle içine reverse = True değeri verilirse 
elemanları büyükten küçüğe sıralar.
"""
a = [12,-2,3,1,34,100]
a.sort()
print(a) # [-2, 1, 3, 12, 34, 100]

a = [12,-2,3,1,34,100]
a.sort(reverse=True)
print(a) # [100, 34, 12, 3, 1, -2]

















# 93. Kodlama Egzersizi - Bir Metin Üzerinde İşlemler
class first():
    def __init__(self):
        with open ("paragraf.txt",'w',encoding='utf-8') as file:
            a="""Moody’s kredi derecelendirme ajansı Fed’in faiz artırımlarına başlamasıyla gelişmekte olan ülkeler arasında yüksek dolarizasyona tabi ülkelerin zarar göreceğini duyurdu. Türkiye dolarizasyondan etkilenecek ülkeler sıralamasında Uruguay, Belarus ve Azerbaycan’ın ardından dördüncü sırada yer alması dikkat çekti.

Moodys’in senaryosuna göre, Fed’in faiz artırımları GOP’a sıcak para girişlerini azaltacak. Hatta, bazı “kırılgan olarak” nitelendirilen finansal sistemlerden para çıkışı bile tetikleyebilir. Bu durumda, vadesi gelen döviz kredilerini yenilemekte tereddüt eden ticari bankaların temerrütlerle karşılaşması olası. Ek olarak, sıcak para kaçışı yerel faizleri yükseltip, ekonomik büyümeyi yavaşlatırsa, bankaların kredilerinde batma riski yükselecek.

“Bilançolarında yüksek miktarda döviz mevduat ve kredi tutan bankalar, yerel para birimi dolara karşı değer yitirdiğinde, yükselen takipteki kredi oranları ve düşen karlılıkla yüzleşecek”, uyarısını yapıyor Moody’s.

Sıradaki paragrafta ise adeta Türkiye tarif edilmiş: “Kurumsalların bankalara döviz borcu sigorta (hedge) edilmemişse, ve yerleşikler döviz mevduatlarını sistemden çıkartmaya başlarsa, ticari bankalar döviz açıklarını gidermek için Merkez Bankası’na başvururlar. Döviz rezervleri bu ihtiyaçları karşılamakta yetersiz kalan Merkez Bankaları yüzünden tüm sistem riske düşebilir. Türkiye’de döviz mevduatın toplama oranı %65 ile risk oldukça yüksek. Bu oran 2020 sonunda sadece %20’ydi. """
            file.write(a)
        with open("paragraf.txt", 'r', encoding='utf-8') as file:
            dosya_icerigi=file.read()
            kelimeler=dosya_icerigi.split()
            self.sade_kelime=list()
            for i in kelimeler:
                i=i.strip('\n')
                i=i.strip(".")
                i=i.strip(",")
                i=i.strip('\"')
                i = i.strip('%')
                self.sade_kelime.append(i)
            #print(self.sade_kelime)

    def cins_kelimeler(self):
        self.kelime_kümesi=set()
        for i in self.sade_kelime:
            self.kelime_kümesi.add(i)
        for i in self.kelime_kümesi:
            print(i)
            print("------------")

    def numberof_kelime(self):
        numletter=dict()
        for i in self.sade_kelime:
            if i in numletter:
                numletter[i]+=1
            else:
                numletter[i]=1
        for kelime,sayi in numletter.items():
            print("{} kelimesi {} kadar var.\n".format(kelime,sayi))
            print("-----------------")


a=first()
#a.cins_kelimeler()
a.numberof_kelime()







# 94. İleri Seviye Veri Yapıları ve Objeler - Programlama Ödevi
#odev 1

class first():
    def __init__(self):
        with open ("paragraf.txt",'w',encoding='utf-8') as file:
            a="""Moody’s kredi derecelendirme ajansı Fed’in faiz artırımlarına başlamasıyla gelişmekte olan ülkeler arasında yüksek dolarizasyona tabi ülkelerin zarar göreceğini duyurdu. Türkiye dolarizasyondan etkilenecek ülkeler sıralamasında Uruguay, Belarus ve Azerbaycan’ın ardından dördüncü sırada yer alması dikkat çekti.

Moodys’in senaryosuna göre, Fed’in faiz artırımları GOP’a sıcak para girişlerini azaltacak. Hatta, bazı “kırılgan olarak” nitelendirilen finansal sistemlerden para çıkışı bile tetikleyebilir. Bu durumda, vadesi gelen döviz kredilerini yenilemekte tereddüt eden ticari bankaların temerrütlerle karşılaşması olası. Ek olarak, sıcak para kaçışı yerel faizleri yükseltip, ekonomik büyümeyi yavaşlatırsa, bankaların kredilerinde batma riski yükselecek.

“Bilançolarında yüksek miktarda döviz mevduat ve kredi tutan bankalar, yerel para birimi dolara karşı değer yitirdiğinde, yükselen takipteki kredi oranları ve düşen karlılıkla yüzleşecek”, uyarısını yapıyor Moody’s.

Sıradaki paragrafta ise adeta Türkiye tarif edilmiş: “Kurumsalların bankalara döviz borcu sigorta (hedge) edilmemişse, ve yerleşikler döviz mevduatlarını sistemden çıkartmaya başlarsa, ticari bankalar döviz açıklarını gidermek için Merkez Bankası’na başvururlar. Döviz rezervleri bu ihtiyaçları karşılamakta yetersiz kalan Merkez Bankaları yüzünden tüm sistem riske düşebilir. Türkiye’de döviz mevduatın toplama oranı %65 ile risk oldukça yüksek. Bu oran 2020 sonunda sadece %20’ydi. """
            file.write(a)
        with open("paragraf.txt", 'r', encoding='utf-8') as file:
            dosya_icerigi=file.read()
            kelimeler=dosya_icerigi.split()
            self.sade_kelime=list()
            for i in kelimeler:
                i=i.strip('\n')
                i=i.strip(".")
                i=i.strip(",")
                i=i.strip('\"')
                i = i.strip('%')
                self.sade_kelime.append(i)
            #print(self.sade_kelime)

    def numberof_kelime(self):
        numletter=dict()
        for j in self.sade_kelime:
            for i in j:
                if i in numletter:
                    numletter[i]+=1
                else:
                    numletter[i]=1
            for kelime,sayi in numletter.items():
                print("{} kelimesi {} kadar var.\n".format(kelime,sayi))
                print("-----------------")


a=first()
#a.cins_kelimeler()
a.numberof_kelime()




















# ödev 2
class first():
    def __init__(self):
        with open("ödev2.txt","w",encoding="utf-8") as file:
            a="""Memlekete sis çökmüş bir gece 
Usulca yanağıma sen düşüyorsun
Sabah saat dokuzu beş geçe
Terk edip bizleri gidiyorsun
Ayrılık bu kadar yakmamıştı içimizi
Farkında mısın bilmiyorum
Aldın beraberinde cumhuriyetimizi
Korkunç bir veda, sararmıştı her yer
Ellerini uzat tutmak istiyoruz
Masmavi gözleri kaybetmiş çocuk
Aldı bir sabah ruhumuzu
Lakin nasıl bölmesin yokluğun uykumuzu      
            """
            file.write(a)
        """ # istersen burda yap isterden ayrı def ac orda yap
        with open("ödev2.txt", "r", encoding="utf-8") as file:
            self.cumleler=list()
            #print(file.readlines())
            #file.seek(0)
            for i in file.readlines(): # yada file.readlines() yerine file yazsanda aynı olurdu
                #print(i)
                self.cumleler.append(i[0])
            #print(self.cumleler)
            self.basharfler=''.join(self.cumleler)
            print(self.basharfler)
            """
    def bas_harfler(self):
        with open("ödev2.txt", "r", encoding="utf-8") as file:
            self.cumleler=list()
            #print(file.readlines())
            #file.seek(0)
            for i in file.readlines(): # yada file.readlines() yerine file yazsanda aynı olurdu
                #print(i)
                self.cumleler.append(i[0])
            #print(self.cumleler)
            self.basharfler=''.join(self.cumleler)
            print(self.basharfler)


a=first()
a.bas_harfler()



















# ödev 3
class first():
    def __init__(self):
        with open("mailler.txt","w") as file:
            a="""coskun.m.murat@gmail.com
example@xyz.com
mustafa.com
mustafa@gmail
kerim@yahoo.com
ikaykoc124@gmail.com
        """
            #print(a)
            file.write(a)

    def proper_ones(self):
        self.propers=list()
        with open("mailler.txt", "r") as file:
            a=file.readlines()
            #print(a)
            for i in a:
                i=i[:-1]
                if (i.endswith("@yahoo.com") ):
                    print(i)
                elif (i.endswith("@gmail.com") ):
                    print(i)

    def proper_find(self):
        self.propers1 = list()
        with open("mailler.txt", "r") as file:
            a = file.readlines()
            for i in a:
                i=i[:-1]
                #print(i,"-----")
                if i.find("@gmail.com")!=-1: # eger yoksa -1 döner
                    print(i)
                elif i.find("@yahoo.com")!=-1:
                    print(i)

a=first()
#a.proper_ones()
a.proper_find()









# ödev 4



class first():

    def __init__(self):
        self.names= ["Kerim","Tarık","Ezgi","Kemal","İlkay","Şükran","Merve"]
        self.surnames= ["Yılmaz","Öztürk","Dağdeviren","Atatürk","Dikmen","Kaya","Polat"]
    def birles_then_order(self):

        self.complete=list()
        for i in zip(self.names,self.surnames):
            #print(i[0],i[1])
            #self.complete.append(i) # iki parcada  'Ezgi','Dağdeviren' gibi
            self.complete.append(i[0]+" "+i[1]) #tek parcada 'Ezgi Dağdeviren'
        #print(self.complete)
        self.complete.sort()
        #print(self.complete)
        for i in self.complete:
            print(i)

a=first()
a.birles_then_order()














#104. İç içe Fonksiyonlar ve Fonksiyon Parametreleri
"""
def topla(*a):
    print(a)
    return sum(a)

a=topla( 1,2,3,4 )
print(a)
"""
"""
def topla(**a):
    print(a)
    return sum(a.values())

a=topla( first=1,second=2,third=3,fourth=4  )
print(a)
"""








#104. İç içe Fonksiyonlar ve Fonksiyon Parametreleri
def func(*a,**b):
    for i in a:
        print(i)
    for i,j in b.items():
        print(i,j)

func(1,2,3,4,5,elma=1,armut=2,ebru=3,ceylan=4)












# biz functionları başka isimlerlede cagırabiliriz, merhaba =selam da öyle yaptık

def selam(a):
    print("hello "+a)

selam("ebru")
merhaba=selam
merhaba("ceylan")









#iç içe fonksiyonlar

def ana(islem,a,b):
    def topla(a,b):
        return a+b
    def cıkar(a,b):
        return a-b
    if(islem=="topla"):
        return topla(a,b)
    elif(islem=="cıkar"):
        return cıkar(a,b)

a=ana("topla",2,3)
print(a)









def func1(*args):
    def topla (args):
        top=0
        for i in args:
            top+=i
        return top
    return topla(args)

a=func1(1,2,3,4,5)
print(a)












def topla(a,b):
    return a+b
def cikar(a,b):
    return a-b
def carp(a,b):
    return a*b
def bol(a,b):
    return a//b

def ana(fun1,fun2,fun3,fun4,islem,a,b):
    if(islem=="topla"):
        return fun1(a,b)
    elif(islem=="cikar"):
        return fun2(a, b)
    elif (islem == "carp"):
        return fun3(a, b)
    elif (islem == "bol"):
        return fun4(a, b)

a=ana(topla,cikar,carp,bol,"topla",2,3)
print(a)




















"""
# 1 inci yol  sürekli her functionda start ,over print yazdık hep
import time

def kareleri_bul(numbers):
    start=time.time()
    final=list()
    for i in numbers:
        final.append(i**2)
    over=time.time()
    print("bu islem bu kadar "+str((over-start)) +" süre sürdü.")
    return final

def kupleri_bul(numbers):
    start = time.time()
    final = list()
    for i in numbers:
        final.append(i**3)
    over = time.time()
    print("bu islem bu kadar " + str((over - start)) + " süre sürdü.")
    return final

a=kareleri_bul(range(100000))
b=kupleri_bul(range(100000))
"""










# 2inci yol ,burda gerek yok sürekli sürekli yazmaya  bunlara decorator deniliyor

import time

def time_hesapla(func):
    def wrapper(numbers):
        start=time.time()
        sonuc=func(numbers)
        final=time.time()
        print(func.__name__ +" " +str((final-start)) +" süre sürdü.")
	# bu __name__ bize  hangi  function ın kullanıldıgını söyler özel komut gibi
        return sonuc
    return wrapper

@time_hesapla  #bunlar ile baglantı kuruyoruz time_hesapla yı
def kareleri_bul(numbers):
    final=list()
    for i in numbers:
        final.append(i**2)
    return final

@time_hesapla
def kupleri_bul(numbers):
    final = list()
    for i in numbers:
        final.append(i**3)
    return final

a=kareleri_bul(range(100000))
b=kupleri_bul(range(100000))
















def ekstralar(temp):
    def temp1(numbers): # buraya sayilar da yazabilirdin direk gene olurdu
        tek_sayilar=0
        cift_sayilar=0
        cift_toplam=0
        tek_toplam=0
        for i in numbers:
            if i%2==0:
                cift_sayilar+=1
                cift_toplam+=i
            else:
                tek_sayilar+=1
                tek_toplam+=i
        print("cift sayıların ortalaması: ",cift_toplam / cift_sayilar)
        print("tek sayıların ortalaması: ",tek_toplam / tek_sayilar)
        temp(numbers)
    return temp1

@ekstralar
def ort(sayilar):
    sonuc=0
    for i in sayilar:
        sonuc+=i
    print("genel ortalama: " ,sonuc / len(sayilar))

ort([1,2,3,4,5,6,7,8,9,10])










# 108. Fonksiyonlar İleri Seviye Özellikleri ve Decoratorlar - Programlama Ödevi
def ekstralar(function):
    def ebru(numbers):
        for i in numbers:
            sonuc=0
            for j in range(1,i):
                if(i%j==0):
                    sonuc+=j
            if sonuc==i:
                print("mukemmel sayı: ",i)
        function(numbers)
    return ebru
@ekstralar
def asallar(numbers):
    for i in numbers:
        temp = 2
        if i <3:
            print("asal sayı: ",i)
        else:
            #print("i: ",i)
            while(temp <i//2 +1 ):
                if(i%temp==0):
                    break
                temp+=1
            if i%temp==0:
                continue
            print("asal sayı: ",i)
asallar(range(1,1001))
















"""
arr=[1,2,3,4,5]
ite=iter(arr)
print(next(ite))
print(next(ite))
print(next(ite))
print(next(ite))
print(next(ite))
print(next(ite)) #burda hata verdi cünkü gidicek yeri yok daha
"""
"""
arr=[1,2,3,4,5]
iterator=iter(arr)
while True:
    try:
        print(next(iterator))
    except StopIteration:
        break
"""
"""
class kumanda():
    def __init__(self,kanal_listesi):
        self.kanal_listesi=kanal_listesi
        self.index=-1
    def __iter__(self):  # bu  self objenin kendisini belirtir, iterable yapmak için
        return self  #  bu __iter__ i kullanmak gerek ,next için de __next__ gerekli
    def __next__(self):
        self.index+=1
        if (self.index < len(self.kanal_listesi)) :
            return self.kanal_listesi[self.index]
        else:
            self.index=-1
            raise StopIteration
arr=["atv","kanal d","fox","halk tv"]
kum=kumanda(arr)
ite=iter(kum)
print(next(ite))
print(next(ite))
print(next(ite))
print(next(ite))
print(next(ite)) # hata verir bunda gidicek yer yok
"""









"""
# generator example
def gen(a):
    for i in a :
        yield i**2 #yield in olayı bir yere depolamıyor ,yapıyor ve siliyor
        # bir daha ulaşamazsın o degere
a=[1,2,3,4]
c=gen(a)
print(c)
ite=iter(c)
print(next(ite))
print(next(ite))
print(next(ite))
print(next(ite))
"""







"""
# biz bu generetor ları illa böyle yapmak zorunda degiliz ,link comprehension ilede yaparız
# [] yerine ()  kullanırsın olur generator olur,
# normalde depolanan
liste=[i*3 for i in range(1,6) ]
print(liste) # [3, 6, 9, 12, 15]
# generator depolanmayan
liste=( i*3 for i in range(1,6) )
print(liste)  # <generator object <genexpr> at 0x00000258B8CAD9E0>
print(( i*3 for i in range(1,6) )) # <generator object <genexpr> at 0x00000258B8D275F0>
"""





"""
def carp():
    for i in range(1,11):
        for j in range(1,11):
            yield "{}*{} = {} ".format(i,j,i*j)
for i in carp():
    print(i)
"""











class kuvvet3():
    def __iter__(self):
        return self
    def __init__(self,a=0):  # overriding bir şey gelmez ise 0 kabul eder
        self.num=a
        self.kuv=0
    def __next__(self):
        if(self.kuv <= self.num ):
            sonuc=3**self.kuv
            self.kuv+=1
            return sonuc
        else:
            self.kuv=0 # eger bunu 0 yapmaz isen , 2 inci for loop u kullanamazsın cünkü self.kuv  6 da kaldı
            raise StopIteration

"""  # 1 inci deneme
temp=kuvvet3(6)
ite=iter(temp)
print(next(ite))
print(next(ite))
"""
# 2 inci deneme
temp=kuvvet3(6)
for i in temp:
    print(i)
for i in temp:
    print(i)













def fibo():
    a=1
    b=1
    yield a #build yield lar degerlerini bir yere kaydetmezler saklamazlar yaparlar ve silerler
    yield b
    while 1:
        a,b=b,a+b
        yield b

for i in fibo():

    if( i >100000 ):
        break
    print(i) # 1 1 2 3 5 8 ....75025 e kadar  yazdırır
    # burda while den cıkısı buna baglı if döngüsüne


















"""
 # 1 inci ödev
class kareler():
    def __init__(self,num=0):
        self.num=num
        self.temp=1
    def __iter__(self):
        return self
    def __next__(self):
        if self.temp<= self.num:
            sonuc=self.temp**2
            self.temp+=1
        else:
            self.temp=1
            raise StopIteration
        return sonuc

temp1=kareler(5)

ite=iter(temp1)
#ite=iter(kareler(5)) # yukarıdaki ile aynı sonuc a ulaşırsın
print(next(ite))
print(next(ite))
print(next(ite))
print(next(ite))
print(next(ite))
print(next(ite))

#for i in temp1:
#    print(i)
"""






# 2 inci ödev ,1'den 1000'e kadar olan sayılardan asal sayıları üreten generator bir fonksiyon yazın.

"""
def gen(a):

    for i in a:
        toplam = 0
        num=2
        while( num<i ):

            if(i%num==0):
                toplam+=1
            num+=1
        if(toplam==0):
            yield i

a=gen(range(1,1001))

for i in a:
    print(i)
"""












print(*range(10))
for i in range(10):
    print(' '*(9-i),end='')
    print('*'*(i*2-1))

"""
0 1 2 3 4 5 6 7 8 9
         
        *
       ***
      *****
     *******
    *********
   ***********
  *************
 ***************
*****************

"""







# bölüm 16

import sys
a=int(input("a: "))
b=int(input("b: "))
sys.exit() # direk programı sonlandırır
c=int(input("c: "))







import sys

sys.stderr.write("bu bir hata mesajıdır\n") # hata yazmak için istenilen hata mesajı için 
sys.stderr.flush() #buffer i yazılanı anında ekrana yazdırmak için kullanılıyor
sys.stdout.write("bu normal bir yazıdır\n") # normal kullanım için
print(sys.argv) # dosyanın computerdaki yerini verir list olarak 1 elemanlı






































































































