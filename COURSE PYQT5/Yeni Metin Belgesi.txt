129. PyQt5 - Pencere Oluşturma ve Pencere Özellikleri

# QtWidgets= pencere buton gibi özellikleri barındıran dosyadır
import sys
from PyQt5 import QtWidgets
def window():
    app=QtWidgets.QApplication(sys.argv) # bu şart ya olmalı yani yoksa hata alırsın
    # uygulama objesi oluşturduk,sys.argv nin olayı ise komut satırından calıştırınca alınacak argumanlar olarak gör

    pencere1=QtWidgets.QWidget() # pencere objesi oluşturduk bir blok oluşturduk aslında
    pencere1.setWindowTitle("ders1") # baslık verdik  bencere objesine
    pencere1.show() # pencereyi gösterdik ekranda

    sys.exit(app.exec_()) # çarpı tusuna basıncaya kadar uygulamayı calıştırır
window()









130. PyQt5 - Pencereye Yazı ve Resim Ekleme

import sys
from PyQt5 import QtWidgets,QtGui # Qpixmap bu QtGui nin içindedir yani resim eklemek için guiye bu kütüphaneyi kullanırız

def a():
   ebru=QtWidgets.QApplication(sys.argv)
   pencere1=QtWidgets.QWidget()
   pencere1.setWindowTitle("ders2")

   etiket1=QtWidgets.QLabel(pencere1) # etiket objesini oluşturduk sonra pencere1  penceresine attık
   etiket2=QtWidgets.QLabel(pencere1) # etiket oluşturduk ve bu etikete resim atıp pencerede göstericez
   etiket2.setPixmap(QtGui.QPixmap("para.jpg"))
   etiket2.move(90,50)

   etiket1.setText("bu bir yazıdır.")
   etiket1.move(200,30) # x  cordinat , y cordinat ,etiket1 yazısını pencerede verdigimiz kordinata yerleştirdik


   # setGeometry(x cordinat , y cordinat ,width of pencere,height of pencere )
   pencere1.setGeometry(100,100,500,500)

   pencere1.show()
   sys.exit(ebru.exec_())
a()










131. PyQt5 - Buton Oluşturma


import sys
from PyQt5 import QtWidgets,QtGui

def a():
   app=QtWidgets.QApplication(sys.argv) # uygulamamızı olusturduk
   pencere=QtWidgets.QWidget() # uygulamamızın penceresini oluşturduk
   
   buton1=QtWidgets.QPushButton(pencere) # buton oluşturduk ve pencerenin içine ekledik
   buton1.setText("bu bir butondur")
   
   etiket=QtWidgets.QLabel(pencere) # pencereden yer ayırdık yazı için
   etiket.setText("hello world")
   etiket.move(100,30) # yazıyı hareket ettirdik
   buton1.move(100,80) # butonnu hareket ettirdik
   
   pencere.setWindowTitle("ders3")
   pencere.setGeometry(100,100,500,500)
   pencere.show()
   sys.exit(app.exec_()) # döngü bu yoksa hemen kapanır  biz carpıya basana kadar devam
a()












# 132. PyQt5 - Horizontal ve Vertical Box Layout Oluşturma

# horizontalda 2 buton koyduk birleşik
import sys
from PyQt5 import QtGui,QtWidgets

def a():
    app=QtWidgets.QApplication(sys.argv)
    pencere=QtWidgets.QWidget()
    okay=QtWidgets.QPushButton("tamam")
    cancel=QtWidgets.QPushButton("iptal")

    h_box=QtWidgets.QHBoxLayout()
    h_box.addWidget(okay)
    h_box.addWidget(cancel)
    pencere.setLayout(h_box)

    pencere.setWindowTitle("ders4")
    pencere.setGeometry(100,100,500,500)
    pencere.show()
    sys.exit(app.exec_())
a()







# 132. PyQt5 - Horizontal ve Vertical Box Layout Oluşturma



# h_box.addStretch() kullanımı sol edge e yapıstılar butonlar
import sys
from PyQt5 import QtWidgets,QtGui
def a():
   app=QtWidgets.QApplication(sys.argv)
   pencere=QtWidgets.QWidget()
   okay=QtWidgets.QPushButton("tamam")
   cancel=QtWidgets.QPushButton("iptal")

   h_box=QtWidgets.QHBoxLayout()
   h_box.addWidget(okay)
   h_box.addWidget(cancel) # eger sag tarafa dogru boşluk bırakmak istiyorsak
   h_box.addStretch() # bu komut ile sol tarafa dogru yaslandılar ve yapıstılar bu komut konuldugu yere göre degişiklik gösterir
   pencere.setLayout(h_box) 

   pencere.setWindowTitle("LESSON4")
   pencere.setGeometry(100,100,500,500)
   pencere.show()
   sys.exit(app.exec_())

a()





# h_box.addStretch() kullanımı  sag edge e yapıstılar butonlar
import sys
from PyQt5 import QtWidgets,QtGui
def a():
   app=QtWidgets.QApplication(sys.argv)
   pencere=QtWidgets.QWidget()
   okay=QtWidgets.QPushButton("tamam")
   cancel=QtWidgets.QPushButton("iptal")

   h_box=QtWidgets.QHBoxLayout()
   h_box.addStretch() # burda ise önce boşluk bıraktı butonlar saga edge deler ve yapıstılar 
   h_box.addWidget(okay)
   h_box.addWidget(cancel) 

   pencere.setLayout(h_box)

   pencere.setWindowTitle("LESSON4")
   pencere.setGeometry(100,100,500,500)
   pencere.show()
   sys.exit(app.exec_())

a()









# h_box.addStretch() kullanımı  butonlar arasında boşluk oldu, 1 buton sol edge de, 1 buton sag edge de
import sys
from PyQt5 import QtWidgets,QtGui
def a():
   app=QtWidgets.QApplication(sys.argv)
   pencere=QtWidgets.QWidget()
   okay=QtWidgets.QPushButton("tamam")
   cancel=QtWidgets.QPushButton("iptal")

   h_box=QtWidgets.QHBoxLayout()

   h_box.addWidget(okay)
   h_box.addStretch()
   h_box.addWidget(cancel)

   pencere.setLayout(h_box)

   pencere.setWindowTitle("LESSON4")
   pencere.setGeometry(100,100,500,500)
   pencere.show()
   sys.exit(app.exec_())

a()










# VERTİCAL box deneme
import sys
from PyQt5 import QtWidgets,QtGui
def ebru():
    app=QtWidgets.QApplication(sys.argv)
    pencere=QtWidgets.QWidget()
    okay=QtWidgets.QPushButton("tamam")
    cancel=QtWidgets.QPushButton("iptal")
    v_box=QtWidgets.QVBoxLayout()
    v_box.addWidget(okay)
    v_box.addWidget(cancel)

    pencere.setLayout(v_box)

    pencere.setGeometry(100,100,500,500)
    pencere.show()
    sys.exit(app.exec_())
ebru()









# VERTİCAL box deneme
import sys
from PyQt5 import QtWidgets,QtGui
def ebru():
    app=QtWidgets.QApplication(sys.argv)
    pencere=QtWidgets.QWidget()
    okay=QtWidgets.QPushButton("tamam")
    cancel=QtWidgets.QPushButton("iptal")
    v_box=QtWidgets.QVBoxLayout()
    v_box.addWidget(okay)
    v_box.addWidget(cancel)
    v_box.addStretch() # 2 butonu vertical ekledikten sonra boşluk koyduk ,up edge de yapıstılar
    pencere.setLayout(v_box)

    pencere.setGeometry(100,100,500,500)
    pencere.show()
    sys.exit(app.exec_())
ebru()










# VERTİCAL box deneme
import sys
from PyQt5 import QtWidgets,QtGui
def ebru():
    app=QtWidgets.QApplication(sys.argv)
    pencere=QtWidgets.QWidget()
    okay=QtWidgets.QPushButton("tamam")
    cancel=QtWidgets.QPushButton("iptal")
    v_box=QtWidgets.QVBoxLayout()
    v_box.addStretch()  # boşluk koyduk sonra  2 butonu vertical ekledik  ,down edge de yapıstılar
    v_box.addWidget(okay)
    v_box.addWidget(cancel)

    pencere.setLayout(v_box)

    pencere.setGeometry(100,100,500,500)
    pencere.show()
    sys.exit(app.exec_())
ebru()











# VERTİCAL box deneme
import sys
from PyQt5 import QtWidgets,QtGui
def ebru():
    app=QtWidgets.QApplication(sys.argv)
    pencere=QtWidgets.QWidget()
    okay=QtWidgets.QPushButton("tamam")
    cancel=QtWidgets.QPushButton("iptal")
    v_box=QtWidgets.QVBoxLayout()
    v_box.addWidget(okay)
    v_box.addStretch() #  okay butonu up edge de,sonra boşluk sonra cancel butonu down edge de yapıstılar
    v_box.addWidget(cancel)

    pencere.setLayout(v_box)

    pencere.setGeometry(100,100,500,500)
    pencere.show()
    sys.exit(app.exec_())
ebru()










# HORİZONTAL-VERTİCAL  butonlar sag alt edge e yapıstırma
import sys
from PyQt5 import QtWidgets,QtGui
def ebru():
    app=QtWidgets.QApplication(sys.argv)
    pencere=QtWidgets.QWidget()
    okay=QtWidgets.QPushButton("tamam")
    cancel=QtWidgets.QPushButton("iptal")

    h_box=QtWidgets.QHBoxLayout()
    h_box.addStretch()
    h_box.addWidget(okay)
    h_box.addWidget(cancel)

    v_box=QtWidgets.QVBoxLayout()
    v_box.addStretch()
    v_box.addLayout(h_box) #normalde addWidget yapardın ama birleştirme olunca addLayout yapılır

    pencere.setLayout(v_box)
    pencere.setGeometry(100,100,500,500)
    pencere.show()
    sys.exit(app.exec_())
ebru()










133. PyQt5 - Butonlara Fonksiyonel Özellik Kazandırma


import sys
from PyQt5 import QtWidgets,QtGui

class first(QtWidgets.QWidget): # QtWidgets.QWidget yazmamızın sebebi inheritance yaptık bu kütüphaneyi bu class a
    # böylece bu kütüphanenin özelliklerini bu class da kullanabiliriz.
    def __init__(self):
        super().__init__() # bunun anlamı ise  bu QWidget in içindeki  __init__ ini kullanmak için bunu yaptık ve
        # yani miras aldıgım init function i kullanmamız gerek, şu an QWidget i calıştırdık pencere olmasını sagladık
        self.ebru() # her şeyi burda tanımladıgımız functionlar ile hallediyoruz artık 
    def ebru(self):
        self.yazı=QtWidgets.QLabel("bana henüz tıklanmadı")
        self.buton=QtWidgets.QPushButton("bana tıkla")
        self.sayı=0

        vbox=QtWidgets.QVBoxLayout()

        vbox.addWidget(self.buton)
        vbox.addWidget(self.yazı)
        vbox.addStretch()

        hbox=QtWidgets.QHBoxLayout()
        hbox.addStretch() # sol edge boşluk bıraktık
        hbox.addLayout(vbox) # ortaya bastırdık butonu ve yazıyı
        hbox.addStretch() # sag edge boşluk bıraktık
        self.setLayout(hbox) # horizontal to verticel or vise versa da bunu kullanırız addWidget olmaz
        self.setGeometry(100,100,500,500)
		
        self.buton.clicked.connect(self.click) # bu butona tıklandıgı zaman bir tane function a baglanıyoruz
	self.show()	

    def click(self):
        self.sayı+=1
        self.yazı.setText("bana "+str(self.sayı)+" defa tıklandı.") # yazıyı degiştirdik burda
app=QtWidgets.QApplication(sys.argv)
pencere=first()
sys.exit(app.exec_())














# 134. PyQt5 - QLineEdit Oluşturma ve Input Alanları
# burda yazı butonu koymayı ögrenecegiz ve yazdıgımız yazıya göre bir response alıcaz

import sys
from PyQt5 import QtWidgets,QtGui

class first(QtWidgets.QWidget):
    def __init__(self):
        super().__init__() # miras aldıgımız QWidget in init ini kullandık her şeyine ulaşabiliriz, self.setLayout() gibi 

        self.ceylan()
    def ceylan(self):
        self.yazı=QtWidgets.QLineEdit() # yazı yazma yeri  kutucuk actık bu ile.
        self.temizle=QtWidgets.QPushButton("default") # buton yaptık
        self.yazdır=QtWidgets.QPushButton("do it") # buton yaptım

        vbox=QtWidgets.QVBoxLayout() # vertical box yaptık

        vbox.addWidget(self.yazı) # vertical box a ekleme yaptım
        vbox.addWidget(self.yazdır) # vertical box a ekleme yaptım
        vbox.addWidget(self.temizle) # vertical box a ekleme yaptım
        vbox.addStretch() # boşluk bıraktık komple alt kısma ,her şey up edge de yapısık

        self.setLayout(vbox) # pencereye yapıstırdık
        self.show() # pencereyi actık


app=QtWidgets.QApplication(sys.argv)
ebru=first()
sys.exit(app.exec_())













# 134. PyQt5 - QLineEdit Oluşturma ve Input Alanları
# burda pencere oluşturduk, 1 yazı alanı 2 buton ,biri temizle biri yazdır ,yazdıgın yazıyı ya printlersin yada silersin yazı yerinden,
import sys
from PyQt5 import QtWidgets,QtGui

class first(QtWidgets.QWidget):
    def __init__(self):
        super().__init__() # miras aldııgmı QWidget in init ini kullandık her şeyine ulaşabiliriz, self.setLayout() gibi

        self.ceylan()
    def ceylan(self):
        self.yazı=QtWidgets.QLineEdit() # yazı yazma yeri  kutucuk actık bu ile.
        self.temizle=QtWidgets.QPushButton("default") # buton yaptık
        self.yazdır=QtWidgets.QPushButton("do it") # buton yaptım

        vbox=QtWidgets.QVBoxLayout() # vertical box yaptık

        vbox.addWidget(self.yazı) # vertical box a ekleme yaptım
        vbox.addWidget(self.yazdır) # vertical box a ekleme yaptım
        vbox.addWidget(self.temizle) # vertical box a ekleme yaptım
        vbox.addStretch() # boşluk bıraktık komple alt kısma ,her şey up edge de yapısık

        self.setLayout(vbox) # pencereye yapıstırdık

        self.temizle.clicked.connect(self.omur) # butona bastıgında omur function ına gider
        self.yazdır.clicked.connect(self.omur)  # butona bastıgında omur function ına gider
        self.setWindowTitle("ders bilmem kaç")
        self.show() # pencereyi actık

    def omur(self):
        sender=self.sender()
        if sender.text() == "default": # bu sender bu function ın baglı oldugu temizle yada yazdır butonundaki parantez içindeki yazıyı cagırıyor bu işe yarar
            self.yazı.clear() #  penceredeki yazı kutucugundaki yazıyı sildik
        elif sender.text() =="do it":
            print(self.yazı.text()) # yazıyı aldık bu function ile

app=QtWidgets.QApplication(sys.argv)
ebru=first()
sys.exit(app.exec_())















# deneme yaptım öyle sag alt köşeye yazı ,yazu kutucugu ve buton koydum
import sys
from PyQt5 import QtWidgets,QtGui

class first(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.ebru()

    def ebru(self):
        self.setGeometry(0,0,500,500)
        self.setWindowTitle("deneme1")

        self.etiket1=QtWidgets.QLabel(self)
        self.etiket1.setText("mod1")
        self.etiket2 = QtWidgets.QLabel(self)
        self.etiket2.setText("mod2")
        self.etiket3= QtWidgets.QLabel(self)
        self.etiket3.setText("mod3")
        self.etiket4 = QtWidgets.QLabel(self)
        self.etiket4.setText("mod4")
        self.yazı1=  QtWidgets.QLineEdit()
        self.yazı2=  QtWidgets.QLineEdit()
        self.yazı3 = QtWidgets.QLineEdit()
        self.buton1=  QtWidgets.QPushButton("bas1")
        self.buton2=  QtWidgets.QPushButton("bas2")
        self.buton3 = QtWidgets.QPushButton("bas3")
        self.buton4 = QtWidgets.QPushButton("bas4")
	
	
	
        h1 = QtWidgets.QHBoxLayout()
        h2 = QtWidgets.QHBoxLayout()
        h3 = QtWidgets.QHBoxLayout()
        h4 = QtWidgets.QHBoxLayout()

        h1.addStretch()
        h1.addWidget(self.etiket1)
        h1.addWidget(self.yazı1)
        h1.addWidget(self.buton1)

        h2.addStretch()
        h2.addWidget(self.etiket2)
        h2.addWidget(self.yazı2)
        h2.addWidget(self.buton2)

        h3.addStretch()
        h3.addWidget(self.etiket3)
        h3.addWidget(self.yazı3)
        h3.addWidget(self.buton3)

        h4.addStretch()
        h4.addWidget(self.etiket4)
        h4.addStretch()
        h4.addWidget(self.buton4)

        v1=QtWidgets.QVBoxLayout()

        v1.addStretch()
        v1.addLayout(h1)
        v1.addLayout(h2)
        v1.addLayout(h3)
        v1.addLayout(h4)
        self.setLayout(v1)

app=QtWidgets.QApplication(sys.argv)
stu1=first()
stu1.show()
sys.exit(app.exec_())


























# 137. PyQt5 - Checkbox Kullanımı

import sys
from PyQt5 import QtWidgets

class first(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.ebru()

    def ebru(self):

        self.yazı=QtWidgets.QLabel("")
        self.but=QtWidgets.QPushButton("butondur bu tikla")
        self.checkbut=QtWidgets.QCheckBox("python'u severmisin ?")

        vbox=QtWidgets.QVBoxLayout()
        vbox.addWidget(self.checkbut)
        vbox.addWidget(self.yazı)
        vbox.addWidget(self.but)
        vbox.addStretch()
        self.setLayout(vbox)
        #self.setGeometry(0,0,500,500)
        self.setWindowTitle("137. ders")
        self.but.clicked.connect( lambda : self.click(self.checkbut.isChecked(),self.yazı )) # hata verir lamda yapmaz isen
        self.show()

    def click(self,checkbut,yazı):
        if checkbut:
            yazı.setText("python'i seviyorsun cok güzel")
        else:
            yazı.setText("niye sevmiyorsun ?")

app=QtWidgets.QApplication(sys.argv)
pencere=first() # pencereyi oluşturduk
sys.exit(app.exec_())










# 137. PyQt5 - Checkbox Kullanımı deneme yaptım kendim 
import sys
from PyQt5 import QtWidgets

class first(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.ceylan()
    def ceylan(self):

        self.checkbut=QtWidgets.QCheckBox("life or dead")
        self.yazi=QtWidgets.QLabel("")
        self.but= QtWidgets.QPushButton("choose one")

        hbox=QtWidgets.QHBoxLayout()
        hbox.addWidget(self.checkbut)
        hbox.addWidget(self.yazi)

        vbox=QtWidgets.QVBoxLayout()
        vbox.addLayout(hbox)
        #vbox.addWidget(self.yazi)
        vbox.addWidget(self.but)
        self.setLayout(vbox)
        self.setGeometry(0,0,300,300)
        self.setWindowTitle("deneme2 yaptım checkbox için")
        self.but.clicked.connect(lambda :self.click(self.checkbut.isChecked(),self.yazi )) # function içinde function gönderiyoruz bu sebeple lambda kullandık
        self.show()

    def click(self,checkbut,yazi):
        if checkbut:
            yazi.setText("die")
        else:
            yazi.setText("life")

app=QtWidgets.QApplication(sys.argv)
win=first()
sys.exit(app.exec_())














# 138. PyQt5 - RadioButton Kullanımı
import sys
from PyQt5 import QtWidgets

class first(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.ceylan()
    def ceylan(self):
        self.introduction=QtWidgets.QLabel("hangi dili en cok seviyorsun")
        self.java=QtWidgets.QRadioButton("java")
        self.python = QtWidgets.QRadioButton("python")
        self.c = QtWidgets.QRadioButton("c_and_c++_programs")
        self.yazi=QtWidgets.QLabel("")
        self.but= QtWidgets.QPushButton("send")

        vbox=QtWidgets.QVBoxLayout()

        vbox.addWidget(self.introduction)
        vbox.addWidget(self.java)
        vbox.addWidget(self.python)
        vbox.addWidget(self.c)
        vbox.addStretch()
        vbox.addWidget(self.yazi)
        vbox.addWidget(self.but)


        self.setLayout(vbox)
        self.setGeometry(0,0,300,300)
        self.setWindowTitle("deneme2 yaptım checkbox için")
        self.but.clicked.connect(lambda :self.click(self.java.isChecked(),self.python.isChecked(),self.c.isChecked(),self.yazi )) # function içinde function gönderiyoruz bu sebeple lambda kullandık
        self.show()

    def click(self,java,python,c,yazi):
        if java:
            yazi.setText("java")
        elif python:
            yazi.setText("python")
        elif c:
            yazi.setText("c and c++ program")

app=QtWidgets.QApplication(sys.argv)
win=first()
sys.exit(app.exec_())















# 139. PyQt5 - QTextEdit Oluşturma ve Yazı Alanları

import sys
from PyQt5 import QtWidgets

class first(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.omur()

    def omur(self):
        self.buton1=QtWidgets.QPushButton("clean all")
        self.yazi_alani=QtWidgets.QTextEdit() # bu bize notepad gibi yeni metin belgesi gibi yer acıyor pencerede
        # istedigini yazabilirsin bildigin microsoft word gibi
        vbox=QtWidgets.QVBoxLayout()
        vbox.addWidget(self.yazi_alani)
        vbox.addWidget(self.buton1)

        self.setLayout(vbox)
        self.buton1.clicked.connect(self.ebru)
        self.show()

    def ebru(self):
        self.yazi_alani.clear()

app=QtWidgets.QApplication(sys.argv)
pencere=first() # pencere oluşturduk
sys.exit(app.exec_())
















# 140. Notepad Projesi : QFileDialog Kullanımı ve Notepad Arayüzü Tasarlama

import os
import sys
from PyQt5 import QtWidgets

class first(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.gizem()
    def gizem(self):
        self.yazi_alani = QtWidgets.QTextEdit()
        self.but1 = QtWidgets.QPushButton("temizle")
        self.but2 = QtWidgets.QPushButton("ac")
        self.but3 = QtWidgets.QPushButton("kaydet")

        hbox=QtWidgets.QHBoxLayout()
        hbox.addWidget(self.but1)
        hbox.addWidget(self.but2)
        hbox.addWidget(self.but3)

        vbox=QtWidgets.QVBoxLayout()
        vbox.addWidget(self.yazi_alani)
        vbox.addLayout(hbox)
        self.setLayout(vbox)
        self.setWindowTitle("nodepad uygulaması")
        self.but1.clicked.connect(self.functemiz)
        self.but2.clicked.connect(self.funcac)
        self.but3.clicked.connect(self.funckaydet)
        self.show()

    def functemiz(self):
        self.yazi_alani.clear()
    def funcac(self):
        # yazdıklarımızı file dosyasına açmak için QFileDialog.getOpenFileName kullanırız
        dosya_ismi=QtWidgets.QFileDialog.getOpenFileName(self,"dosya ac sikerim",os.getenv("ebru"))
        # (self burda obje belirtir bizimkide self , dosya ismi  pencerenin up edge inde yazar, dosyayi biz bunun ile yönlendiririz dosya dizini yani

        with open(dosya_ismi[0],'r') as file:
            self.yazi_alani.setText(file.read()) # setText() ile yazi_alani içerigini degiştiriyoruz

    def funckaydet(self):
        # yazdıklarımızı file dosyasına kaydetmek için QFileDialog.getSaveFileName kullanırız
        # (self burda obje belirtir bizimkide self , dosya ismi  pencerenin up edge inde yazar, dosyayi biz bunun ile yönlendiririz dosya dizini yani
        dosya_ismi=QtWidgets.QFileDialog.getSaveFileName(self,"ceylan",os.getenv("hatice"))
        with open(dosya_ismi[0],'w') as file:
            file.write(self.yazi_alani.toPlainText()) 
            # topPlainText burda yazı bicimi italic felan da diyebilirdik
            
app=QtWidgets.QApplication(sys.argv)
pencere=first()
sys.exit(app.exec_())














# 141. PyQt5 - Menü Oluşturma ve Alt Menüler
"""
qApp = sistemi sonlandirmak için kullanıcaz
QMainWindow= aslında ana pencere sınıfıdır ,şu ana kadar yaptıkların sadece widgetdir. bu widget larıda bu main window içine koyarız
ve menu class ınin içinde olmalı bu widget sayfaları
QAction = menular içinde action ,dinamizim vermek için
QApplication =  bu sınıf her zaman olmalı ,uygulamayı bu sınıftan oluştururuz
"""
import sys
from PyQt5 import QtWidgets
class menu_uygulamasi(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__() # QtWidgets.QMainWindow in sınıfının init function ini cagırdık

        menubar=self.menuBar() # bu bir komuttur menuBar yukrıda gördügün file,edit,view,navigate i bunu kullanarak ekleriz

        dosya1=menubar.addMenu("filmler") # bunun ile menuye ekleme yaptık filmler diye gözükür menude ama burda dosya1 ismi ile iş yaparız
        dosya2=menubar.addMenu("kadinlar")

        dosya_ac=QtWidgets.QAction("dosya ac",self) # burda self zorunlu,bu QAction ile bir özellik kazandirdık dinamizim
        dosya_ac.setShortcut("Ctrl+O") #menu yanina shortcut ekledik hem yazı olarak hemde uygulama olarak ctrl+q basınca kapanır

        dosya_kaydet= QtWidgets.QAction("dosya kaydet",self) # pencere de dosya kaydet olarak gözükmesini saglar
        dosya_kaydet.setShortcut("ctrl+s") # short cut ekledik ve pencereye yerleştirdik karşılıgında bu dosya kaydet in

        cikis=QtWidgets.QAction("cıkış",self)
        cikis.setShortcut("ctrl+q")

        dosya1.addAction(dosya_ac) # pencereye bunun ile ekliyoruz
        dosya1.addAction(dosya_kaydet)
        dosya1.addAction(cikis)

        ara_ve_degistir= dosya2.addMenu("ara ve degistir")

        ara=QtWidgets.QAction("Ara",self)
        degistir=QtWidgets.QAction("Degistir",self)
        temizle=QtWidgets.QAction("Temizle",self)

        ara_ve_degistir.addAction(ara) # alt menu ekledik pencereye ,yani pencerede görmek istiyorsan addAction i yapmalısın
        ara_ve_degistir.addAction(degistir)
        ara_ve_degistir.addAction(temizle)

        # clicked.connect yapmadık burda
        cikis.triggered.connect(self.cikis_yap) # yani bu action a basıldıgında söyle bir function a özellik oluşsun diyoruz ve cikis_yap functiona bagladık
        dosya1.triggered.connect(self.response) # burda action göndermedik ama python kendi gönderiyor functionda yazmak zorundayız ama

        self.setWindowTitle("menuler uygulamam")
        self.show()

    def cikis_yap(self):
        QtWidgets.qApp.quit() # sistemi direk sonlandırır ,uygulamayı kapatır yani
    def response(self,action):
        if action.text()=="dosya ac":
            print("dosya ac'a basıldı.")
        elif action.text()=="dosya kaydet":
            print("dosya kaydet'e basıldı.")
        elif action.text()=="cikis":
            print("cikis'a basıldı.")


app=QtWidgets.QApplication(sys.argv)
pencere=menu_uygulamasi()
sys.exit(app.exec_())














# 142. Notepad Projesi : Projeye Menü Ekleme ve Projeyi Tamamlama
"""
kaydet i acıp sonra bir dosya secmeden kapatınca hata veriyor
burda ne yaptık şimdi ,biz main class oluşturduk bu genel olarak mainwindow ana pencere vebuna biz widget yani önceki derslerde yapılan
yan pencereleri ekledik burda nodepad ekledik sonra menubar ekledik action kattık sonra actionları menubar a yerleştirdik
bildigin yeni metin belgesi.txt yaptık
"""

import os
import sys
from PyQt5 import QtWidgets

class first(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.gizem()

    def gizem(self):
        self.yazi_alani = QtWidgets.QTextEdit() # metin belgesi içine istedigini yaz boydan boya 
        self.but1 = QtWidgets.QPushButton("temizle")
        self.but2 = QtWidgets.QPushButton("ac")
        self.but3 = QtWidgets.QPushButton("kaydet")

        hbox = QtWidgets.QHBoxLayout()
        hbox.addWidget(self.but1)
        hbox.addWidget(self.but2)
        hbox.addWidget(self.but3)

        vbox = QtWidgets.QVBoxLayout()
        vbox.addWidget(self.yazi_alani)
        vbox.addLayout(hbox)
        self.setLayout(vbox)
        self.setWindowTitle("nodepad uygulaması") # bunun bir önemi kalmadı menu class inda ki setwindowtitle var
        self.but1.clicked.connect(self.functemiz)
        self.but2.clicked.connect(self.funcac)
        self.but3.clicked.connect(self.funckaydet)
        #self.show() # eger bunu silmez isen 2 tane pencere acılıyormus gibi olur ama 1 tane acılır

    def functemiz(self):
        self.yazi_alani.clear()

    def funcac(self):
        # yazdıklarımızı file dosyasına açmak için QFileDialog.getOpenFileName kullanırız
        dosya_ismi = QtWidgets.QFileDialog.getOpenFileName(self, "dosya ac sikerim", os.getenv("ebru"))
        # (self burda obje belirtir bizimkide self , dosya ismi  pencerenin up edge inde yazar, dosyayi biz bunun ile yönlendiririz dosya dizini yani

        with open(dosya_ismi[0], 'r') as file:
            self.yazi_alani.setText(file.read())  # setText() ile yazi_alani içerigini degiştiriyoruz

    def funckaydet(self):
        # yazdıklarımızı file dosyasına kaydetmek için QFileDialog.getSaveFileName kullanırız
        # (self burda obje belirtir bizimkide self , dosya ismi  pencerenin up edge inde yazar, dosyayi biz bunun ile yönlendiririz dosya dizini yani
        dosya_ismi = QtWidgets.QFileDialog.getSaveFileName(self, "ceylan", os.getenv("hatice"))
        with open(dosya_ismi[0], 'w') as file:
            file.write(self.yazi_alani.toPlainText())
            # topPlainText burda yazı bicimi italic felan da diyebilirdik


class Menu(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.pencere=first() # şu an bir adet pencere oluşturduk
        self.setCentralWidget(self.pencere) # ortaya 1 adet widget eklemek istedik ve bu widget i ana pencereye eklemiş olduk

        self.menu_olustur()

    def menu_olustur(self):

        menubar=self.menuBar()
        dosya=menubar.addMenu("Dosya")

        dosya_ac=QtWidgets.QAction("Dosya Ac",self)
        dosya_ac.setShortcut("ctrl+o")

        dosya_kaydet=QtWidgets.QAction("Dosya Kaydet",self)
        dosya_kaydet.setShortcut("ctrl+s")

        temizle=QtWidgets.QAction("Dosyayı Temizle",self)
        temizle.setShortcut("ctrl+q")

        cikis=QtWidgets.QAction("Cıkıs",self)
        cikis.setShortcut("ctrl+q")

        dosya.addAction(dosya_ac)
        dosya.addAction(dosya_kaydet)
        dosya.addAction(temizle)
        dosya.addAction(cikis)

        dosya.triggered.connect(self.response)

        self.setWindowTitle("metin editoru")
        self.show()

    def response(self,action):
        if action.text()=="Dosya Ac":
            self.pencere.funcac()
        elif action.text()=="Dosya Kaydet":
            self.pencere.funckaydet()
        elif action.text()=="Dosyayı Temizle":
            self.pencere.functemiz()
        elif action.text()=="Cikis":
            QtWidgets.qApp.quit()

app = QtWidgets.QApplication(sys.argv)
menu = Menu()
sys.exit(app.exec_())











































